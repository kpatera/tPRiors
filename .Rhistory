plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.17))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
# The data 1 - The data 2.
y <-rep(0,10) ; y2 <-rep(0,1000)
x <- rep(0,10) ; x2 <- rep(0,1000)
N <- length(y) ; N2 <- length(y2)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 1, "b1" = 1,
"a2" = 1, "b2" = 1,
"x1" = 20, "x2" = 80)
the_data2<-the_data
the_data2$y<-y2;the_data2$x<-x2;the_data2$N<-N2
SaveParams <- c("beta0","beta1","p1","p2")
# Data 1
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_BayesLogist,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model1.mcmc<-summary(Model1.mcmc)
# Data 2
jagsoutput_BayesLogist2<-rjags::jags.model(data=the_data2,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model2.mcmc <<- coda.samples(jagsoutput_BayesLogist2,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model2.mcmc<-summary(Model2.mcmc)
sum_Model1.mcmc$statistics
sum_Model2.mcmc$statistics
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.17))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.25))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
# The data 1 - The data 2.
y <-rep(0,10) ; y2 <-rep(0,1000); y1 <-rep(0,100)
x <- rep(0,10) ; x2 <- rep(0,1000); x1 <- rep(0,100)
N <- length(y) ; N2 <- length(y2); N1 <- length(y1)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 1, "b1" = 1,
"a2" = 1, "b2" = 1,
"x1" = 20, "x2" = 80)
the_data2<-the_data1<-the_data
the_data2$y<-y2;the_data2$x<-x2;the_data2$N<-N2
the_data1$y<-y1;the_data1$x<-x1;the_data1$N<-N1
SaveParams <- c("beta0","beta1","p1","p2")
# Data 1
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model.mcmc <<- coda.samples(jagsoutput_BayesLogist,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model.mcmc<-summary(Model.mcmc)
# Data 2
jagsoutput_BayesLogist1<-rjags::jags.model(data=the_data1,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_BayesLogist1,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model1.mcmc<-summary(Model1.mcmc)
# Data 3
jagsoutput_BayesLogist2<-rjags::jags.model(data=the_data2,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model2.mcmc <<- coda.samples(jagsoutput_BayesLogist2,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model2.mcmc<-summary(Model2.mcmc)
sum_Model.mcmc$statistics
sum_Model1.mcmc$statistics
sum_Model2.mcmc$statistics
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
lines(density(as.mcmc(Model.mcmc)[,2]),col="blue")
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 2),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 3),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.2),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topleft",col = c("black","red","blue"),legend = c(".","...",".."))
legend("topright",col = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"),lty = c("l","l","l"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15),
main="Proof of concept - Bayes simple",xlab = "",ylab = "Posterior densities")
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
date()
set.seed(date())
?date
set.seed(numeric(date())
set.seed(numeric(date()))
numeric(date())
today()
set.seed(as.numeric(Sys.time()))
Groups<-rbinom(n = length(Names),size = 10,0.5)
Names<-c("Zaheer","Clara","Sintayehu","Neville","Dmitry","Marcel","Sanjaya",
"Ali Mertcan","Fatih","Pavle","Alexia","Peter Francis","Yasin","Xhelil",
"Eda","Jewel","Naime","Anthony","Domniki")
set.seed(as.numeric(Sys.time()))
Groups<-rbinom(n = length(Names),size = 10,0.5)
Groups
sample(Names,size = length(Names),replace = F)
sample(Names,size = length(Names),replace = F)
set.seed(as.numeric(Sys.time()))
sample(Names,size = length(Names),replace = F)
set.seed(as.numeric(Sys.time()))
sample(Names,size = length(Names),replace = F)
Groups
rep(1:9,2)
?rep
rep(1:9,length.out=2)
rep(1:9,times=2)
rep(1:9,each=2)
19/3
20/3
18/3
Groups<-data.frame(Names=sample(Names,size = length(Names),replace = F),
Groups_MCMC=c(rep(1:9,each=2),9),
Groups_tPRiors=c(rep(1:3,each=6),3))
Groups
Names<-c("Zaheer","Clara","Sintayehu","Neville","Dmitry","Marcel","Sanjaya",
"Ali Mertcan","Fatih","Pavle","Alexia","Peter Francis","Yasin","Xhelil",
"Eda","Jewel","Naime","Anthony","Domniki")
seed<-as.numeric(Sys.time())
set.seed(seed)
Groups<-data.frame(Names=sample(Names,size = length(Names),replace = F),
Groups_MCMC=c(rep(1:9,each=2),9),
Groups_tPRiors=c(rep(1:3,each=6),3))
Groups
as.numeric(Sys.time())
as.numeric(Sys.time())
as.numeric(Sys.time())
as.numeric(Sys.time())
as.numeric(Sys.time())
as.numeric(Sys.time())
runApp()
runApp()
Groups
runApp()
runGitHub("tPRiors", "kpatera")
runUrl("https://github.com/rstudio/tPRiors/archive/master.zip")
runUrl("https://github.com/kpatera/tPRiors/archive/master.zip")
runGitHub(repo = "tPRiors",username =  "kpatera")
runGitHub(repo = "tPRiors",username =  "kpatera")
runGitHub(repo = "tPRiors",username =  "kpatera")
options(download.file.method = "wininet")
runGitHub(repo = "tPRiors",username =  "kpatera")
options(download.file.method = "libcurl")
runGitHub(repo = "tPRiors",username =  "kpatera")
runUrl("https://github.com/kpatera/tPRiors/archive/master.zip")
rsconnect::setAccountInfo(name='publicintegratedhealth',
token='F34660B3A911BDD4DF7454D0FE9B6116',
secret='<SECRET>')
rsconnect::setAccountInfo(name='publicintegratedhealth',
token='F34660B3A911BDD4DF7454D0FE9B6116',
secret='zrvij1H07iSq5jGd++1/3u6G014de0iuRs+QNAKL')
shiny::runApp()
burnin=450
y<-c(32,36,37,34,38,36,33,36,37,35,32,35); bary<-mean(y); n<-length(y)
Iterations<-20000
muO<-0; s0<-100; a0<-0.001; b0<-0.001
theta <- matrix(nrow=Iterations, ncol=2)
cur.mu<-0; cur.tau<-1; cur.s<-sqrt(1/cur.tau)
for (t in 1:Iterations){
w<- s0^2/( cur.s^2/n+ s0^2)
m <- w*bary + (1-w)*muO
s <- sqrt( w * cur.s^2/n)
cur.mu <- rnorm(1, m, s)
a <- a0 + 0.5*n
b <- b0 + 0.5 * sum( (y-cur.mu)^2)
cur.tau <- rgamma( 1, a, b)
cur.s <- sqrt(1/cur.tau)
theta[t,]<-c( cur.mu, cur.s)
}
par(mfrow=c(2,1))
plot(theta[450:Iterations,1],type="l")
plot(theta[450:Iterations,2],type="l")
plot(theta[450:Iterations,1],type="l",main = "mu")
plot(theta[450:Iterations,2],type="l",main = "sigma")
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:Iterations,2],type="l",main = "sigma", ylab="")
effectiveSize(parameters_coda) # XX iterations to get an independent sample
HPDinterval(parameters_coda) # True posterior 95% credible interval
parameters_coda <- window(coda::as.mcmc(theta), start=burnin+1)
varnames(parameters_coda) <- c('mu','sigma')
effectiveSize(parameters_coda) # XX iterations to get an independent sample
HPDinterval(parameters_coda) # True posterior 95% credible interval
autocorr(parameters_coda, lags=1)
autocorr.plot(parameters_coda)
geweke.plot(parameters_coda)
geweke.diag(parameters_coda) # z-score
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="l",main = "sigma", ylab="")
plot(theta[450:Iterations,1],theta[450:Iterations,2],main = "sigma", ylab="")
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="o",main = "sigma", ylab="")
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "sigma", ylab="")
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "sigma", ylab="",lwd=0.5)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "sigma", ylab="",pch=0.5)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "sigma", ylab="",lwd=0.1)
par(mfrow=c(1,3))
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "sigma", ylab="",lwd=0.1)
par(mfrow=c(1,2))
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:Iterations,2],type="l",main = "sigma", ylab="")
Iterations
Iterations
par(mfrow=c(2,2))
plot(theta[450:500,1],theta[450:Iterations,2],
type="p",main = "mu, sigma [50]", ylab="",lwd=0.1)
par(mfrow=c(2,2))
plot(theta[450:500,1],theta[450:500,2],
type="p",main = "mu, sigma [50]", ylab="",lwd=0.1)
plot(theta[450:650,1],theta[450:650,2],
type="p",main = "mu, sigma [200]", ylab="",lwd=0.1)
plot(theta[450:1050,1],theta[450:1050,2],
type="p",main = "mu, sigma [1000]", ylab="",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "mu, sigma [19550]", ylab="",lwd=0.1)
parameters_coda <- window(coda::as.mcmc(theta), start=burnin+1)
plot(theta[450:500,1],theta[450:500,2],
type="l",main = "mu, sigma [50]", ylab="",lwd=0.1)
450:490
450:460
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "mu, sigma [10]", ylab="",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="p",main = "mu, sigma [25]", ylab="",lwd=0.1)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "mu, sigma [10]", ylab="",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "mu, sigma [25]", ylab="",lwd=0.1)
plot(theta[450:499,1],theta[450:499,2],
type="p",main = "mu, sigma [50]", ylab="",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "mu, sigma [19550]", ylab="",lwd=0.1)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "mu, sigma [10]", ylab="",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "mu, sigma [25]", ylab="",lwd=0.1)
plot(theta[450:499,1],theta[450:499,2],
type="l",main = "mu, sigma [50]", ylab="",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "mu, sigma [19550]", ylab="",lwd=0.1)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "mu, sigma [10]", ylab="",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "mu, sigma [25]", ylab="",lwd=0.1)
plot(theta[450:649,1],theta[450:649,2],
type="l",main = "mu, sigma [299]", ylab="",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "mu, sigma [19550]", ylab="",lwd=0.1)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "[25]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:649,1],theta[450:649,2],
type="l",main = "[200]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "[19550]", ylab="sigma", xlab="mu",lwd=0.1)
setwd()
getwd()
jpeg(filename = "Gibbs_Results_Uni.jpg",width = 1000,height = 1000,res=150)
par(mfrow=c(1,2))
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:Iterations,2],type="l",main = "sigma", ylab="")
dev.off()
jpeg(filename = "Metropolis_Results_both.jpg",width = 1000,height = 1000,res=150)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "[25]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:649,1],theta[450:649,2],
type="l",main = "[200]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "[19550]", ylab="sigma", xlab="mu",lwd=0.1)
dev.off()
par(mfrow=c(1,2))
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:Iterations,2],type="l",main = "sigma", ylab="")
jpeg(filename = "Gibbs_Results_Uni.jpg",width = 1000,height = 700,res=150)
par(mfrow=c(1,2))
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:Iterations,2],type="l",main = "sigma", ylab="")
dev.off()
effectiveSize(parameters_coda) # XX iterations to get an independent sample
20000/18757.47
geweke.plot(parameters_coda)
geweke.diag(parameters_coda) # z-score
1-pnorm(abs(geweke.diag(parameters_coda)[1]$z)) # p-value for convergence.
jpeg(filename = "Metropolis_Results_both.jpg",width = 1000,height = 1000,res=150)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "[25]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:649,1],theta[450:649,2],
type="l",main = "[200]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "[19550]", ylab="sigma", xlab="mu",lwd=0.1)
dev.off()
theta[450:459,1]
rep(theta[450:459,1],2)
rep(theta[450:459,1],each=2)
rep(theta[450:459,1],each=2)
rep(theta[450:459,2],each=2)
plot(rep(theta[450:459,1],each=2),c(NA,theta[450:458,2]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
c(NA,theta[450:458,2])
rep(theta[450:459,1],each=2)
rep(theta[450:459,1],each=2)
rep(theta[450:459,1],each=2)[-20]
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
jpeg(filename = "Gibbs_Results_both_stepbystep.jpg",width = 1000,height = 1000,res=150)
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
dev.off()
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,2],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,2],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
plot(rep(theta[450:459,2],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
dev.off()
plot(rep(theta[450:459,2],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1,ylim=c(34,37),xlim=c(34,36))
plot(rep(theta[450:459,1],each=2),c(NA,rep(theta[450:459,2],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(rep(theta[450:459,2],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
jpeg(filename = "Gibbs_Results_both_stepbystep.jpg",width = 1000,height = 1000,res=150)
plot(rep(theta[450:459,2],each=2),c(NA,rep(theta[450:459,1],each=2)[-20]),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
dev.off()
runApp()
runApp()
runApp()
runApp()
#devtools::install_github('ropensci/plotly')
#require("ropensci/plotly")
#---- Load functions and extra functionss ----#
Funcs<-c("findbeta2.R","findbetaqq2.R","findbetamupsi.R","findbetamupsi2.R","ggs_density.R",
"get_family.R","multiroot.R","perturb.R","gss.R")
invisible(lapply(Funcs,function(i){ source(paste("Functions/",i,sep="")) }))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(c(NA,rep(theta[450:459,1],each=2)[-20],rep(theta[450:459,2],each=2)),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
burnin=450
y<-c(32,36,37,34,38,36,33,36,37,35,32,35); bary<-mean(y); n<-length(y)
Iterations<-20000
muO<-0; s0<-100; a0<-0.001; b0<-0.001
theta <- matrix(nrow=Iterations, ncol=2)
cur.mu<-0; cur.tau<-1; cur.s<-sqrt(1/cur.tau)
for (t in 1:Iterations){
w<- s0^2/( cur.s^2/n+ s0^2)
m <- w*bary + (1-w)*muO
s <- sqrt( w * cur.s^2/n)
cur.mu <- rnorm(1, m, s)
a <- a0 + 0.5*n
b <- b0 + 0.5 * sum( (y-cur.mu)^2)
cur.tau <- rgamma( 1, a, b)
cur.s <- sqrt(1/cur.tau)
theta[t,]<-c( cur.mu, cur.s)
}
plot(c(NA,rep(theta[450:459,1],each=2)[-20],rep(theta[450:459,2],each=2)),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
c(NA,rep(theta[450:459,1],each=2)
plot(c(NA,rep(theta[450:459,1],each=2)[-20]),rep(theta[450:459,2],each=2),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(c(NA,rep(theta[450:459,1],each=2)[-20]),rep(theta[450:459,2],each=2),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
burnin=450
y<-c(32,36,37,34,38,36,33,36,37,35,32,35); bary<-mean(y); n<-length(y)
Iterations<-20000
muO<-0; s0<-100; a0<-0.001; b0<-0.001
theta <- matrix(nrow=Iterations, ncol=2)
cur.mu<-0; cur.tau<-1; cur.s<-sqrt(1/cur.tau)
for (t in 1:Iterations){
w<- s0^2/( cur.s^2/n+ s0^2)
m <- w*bary + (1-w)*muO
s <- sqrt( w * cur.s^2/n)
cur.mu <- rnorm(1, m, s)
a <- a0 + 0.5*n
b <- b0 + 0.5 * sum( (y-cur.mu)^2)
cur.tau <- rgamma( 1, a, b)
cur.s <- sqrt(1/cur.tau)
theta[t,]<-c( cur.mu, cur.s)
}
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(c(NA,rep(theta[450:459,1],each=2)[-20]),rep(theta[450:459,2],each=2),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
set.seed()
################################################
######## Gibbs sampling ########################
################################################ I Ntzoufras tweaked example
# Dataa$temperature
set.seed(234)
burnin=450
y<-c(32,36,37,34,38,36,33,36,37,35,32,35); bary<-mean(y); n<-length(y)
Iterations<-20000
muO<-0; s0<-100; a0<-0.001; b0<-0.001
theta <- matrix(nrow=Iterations, ncol=2)
cur.mu<-0; cur.tau<-1; cur.s<-sqrt(1/cur.tau)
for (t in 1:Iterations){
w<- s0^2/( cur.s^2/n+ s0^2)
m <- w*bary + (1-w)*muO
s <- sqrt( w * cur.s^2/n)
cur.mu <- rnorm(1, m, s)
a <- a0 + 0.5*n
b <- b0 + 0.5 * sum( (y-cur.mu)^2)
cur.tau <- rgamma( 1, a, b)
cur.s <- sqrt(1/cur.tau)
theta[t,]<-c( cur.mu, cur.s)
}
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(c(NA,rep(theta[450:459,1],each=2)[-20]),rep(theta[450:459,2],each=2),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(c(NA,rep(theta[450:459,1],each=2)[-20]),rep(theta[450:459,2],each=2),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
jpeg(filename = "Gibbs_Results_Uni.jpg",width = 1000,height = 700,res=150)
par(mfrow=c(1,2))
plot(theta[450:Iterations,1],type="l",main = "mu", ylab="")
plot(theta[450:Iterations,2],type="l",main = "sigma", ylab="")
dev.off()
jpeg(filename = "Gibbs_Results_both.jpg",width = 1000,height = 1000,res=150)
par(mfrow=c(2,2))
plot(theta[450:459,1],theta[450:459,2],
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:474,1],theta[450:474,2],
type="l",main = "[25]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:649,1],theta[450:649,2],
type="l",main = "[200]", ylab="sigma", xlab="mu",lwd=0.1)
plot(theta[450:Iterations,1],theta[450:Iterations,2],
type="p",main = "[19550]", ylab="sigma", xlab="mu",lwd=0.1)
dev.off()
jpeg(filename = "Gibbs_Results_both_stepbystep.jpg",width = 1000,height = 1000,res=150)
plot(c(NA,rep(theta[450:459,1],each=2)[-20]),rep(theta[450:459,2],each=2),
type="l",main = "[10]", ylab="sigma", xlab="mu",lwd=0.1)
dev.off()
getwd()
runApp()
