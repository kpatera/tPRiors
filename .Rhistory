variable.names=SaveParams)
plot(density(Model1.mcmc[[1]][,2]),xlim=c(0,1),ylim=c(0,10))
jagsoutput_Truezero<-jags.model(data=list(n=100,y=97,
#ase=fb_SE$a,
#bse=fb_SE$b,
#asp=fb_SP$a,
#bsp=fb_SP$b,
#astar=fb$a,
#bstar=fb$b,
tau0=0.1),n.chains=2,
file=paste("TruezeroPre.txt"),quiet=TRUE)
#   update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_Truezero,  n.iter=10000,
n.thin=5, n.burnin=floor(10000/10),
variable.names=SaveParams)
plot(density(Model1.mcmc[[1]][,2]),xlim=c(0,1),ylim=c(0,10))
cat("model{ #ap denotes apparent, #main.ap denotes true prevalence
y ~ dbin(ap, n)
#Uniform (non-informative) prior for true prevalence (tp)
ap<-p*Se+(1-p)*(1-Sp)
# p <-  main.ap
#z ~ dbern(tau0)
pequal0 <- equals(p, 0)    #Informative priors on Se and Sp
#Se ~ dbeta(ase, bse) ## Mode=0.70, 95% sure Se > 0.55 (88.5, 10.22)
#Sp ~ dbeta(asp, bsp) ## Mode=0.99, 95% sure Sp > 0.95  dbeta(88.28, 1.882)
#main.ap ~ dbeta(astar, bstar) ## Mode=0.03, 95% sure pistar < 0.15  dbeta(1.80, 26.74)
Se ~ dbeta(22.5, 1.22) ## Mode=0.70, 95% sure Se > 0.55
Sp ~ dbeta(88.28, 1.882) ## Mode=0.99, 95% sure Sp > 0.95
p ~ dbeta(1.80, 26.74) ## Mode=0.03, 95% sure pistar < 0.15
}", file=paste("TruezeroPre.txt"))
#data - list(n=91, y=3,tau0=0.10)
#initials -list(pstar=0.03, Se=0.70, Sp=0.99,z=0)}
SaveParams <- c("p","Se","Sp","ap","pequal0")
jagsoutput_Truezero<-jags.model(data=list(n=100,y=97,
#ase=fb_SE$a,
#bse=fb_SE$b,
#asp=fb_SP$a,
#bsp=fb_SP$b,
#astar=fb$a,
#bstar=fb$b,
tau0=0.1),n.chains=2,
file=paste("TruezeroPre.txt"),quiet=TRUE)
#   update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_Truezero,  n.iter=10000,
n.thin=5, n.burnin=floor(10000/10),
variable.names=SaveParams)
plot(density(Model1.mcmc[[1]][,1]),xlim=c(0,1),ylim=c(0,10))
jagsoutput_Truezero<-jags.model(data=list(n=100,y=4,
#ase=fb_SE$a,
#bse=fb_SE$b,
#asp=fb_SP$a,
#bsp=fb_SP$b,
#astar=fb$a,
#bstar=fb$b,
tau0=0.1),n.chains=2,
file=paste("TruezeroPre.txt"),quiet=TRUE)
#   update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_Truezero,  n.iter=10000,
n.thin=5, n.burnin=floor(10000/10),
variable.names=SaveParams)
plot(density(Model1.mcmc[[1]][,1]),xlim=c(0,1),ylim=c(0,10))
plot(Model1.mcmc)
plot(density(Model1.mcmc[[1]][,4]),xlim=c(0,1),ylim=c(0,10))
cat("model{ #ap denotes apparent, #main.ap denotes true prevalence
y ~ dbin(ap, n)
#Uniform (non-informative) prior for true prevalence (tp)
ap<-p*Se+(1-p)*(1-Sp)
# p <-  main.ap
#z ~ dbern(tau0)
pequal0 <- equals(p, 0)    #Informative priors on Se and Sp
#Se ~ dbeta(ase, bse) ## Mode=0.70, 95% sure Se > 0.55 (88.5, 10.22)
#Sp ~ dbeta(asp, bsp) ## Mode=0.99, 95% sure Sp > 0.95  dbeta(88.28, 1.882)
#main.ap ~ dbeta(astar, bstar) ## Mode=0.03, 95% sure pistar < 0.15  dbeta(1.80, 26.74)
Se ~ dbeta(22.5, 1.22) ## Mode=0.70, 95% sure Se > 0.55
Sp ~ dbeta(88.28, 1.882) ## Mode=0.99, 95% sure Sp > 0.95
p ~ dbeta(1.80, 26.74) ## Mode=0.03, 95% sure pistar < 0.15
}", file=paste("TruezeroPre.txt"))
#data - list(n=91, y=3,tau0=0.10)
#initials -list(pstar=0.03, Se=0.70, Sp=0.99,z=0)}
SaveParams <- c("p","Se","Sp","ap","pequal0")
jagsoutput_Truezero<-jags.model(data=list(n=100,y=4,
#ase=fb_SE$a,
#bse=fb_SE$b,
#asp=fb_SP$a,
#bsp=fb_SP$b,
#astar=fb$a,
#bstar=fb$b,
tau0=0.1),n.chains=2,
file=paste("TruezeroPre.txt"),quiet=TRUE)
#   update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_Truezero,  n.iter=10000,
n.thin=5, n.burnin=floor(10000/10),
variable.names=SaveParams)
plot(density(Model1.mcmc[[1]][,4]),xlim=c(0,1),ylim=c(0,10))
runApp()
runApp()
runApp()
Model1.mcmc
Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
priors$prior<<-list(a=fb$a,b=fb$b)
post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
Lik <- data.frame(density=rbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n)
triple <- rbind(post, pri, Lik)
p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2)+
xlim(0, 1)+ theme(legend.position="top")
ggplotly(p1)
post
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1.450*60
1.450*40
1.450*36
1.450*24
1.450*22
1.880*12
1.070*12
1.070*12+1450*24
1.070*12+1.450*24
1.070*24+1.450*12
1.070*24+1.450*6
1.070*24+1.450*7
1.650*22
1.650*12
50*8*22
50*8*22*0.6
50*0.6
1800*12
28*1800
14*1800
12*1800
13*1800
1+5+6+9+6
1+1+8+3
13+5+6
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
temp=findbetamupsi(themean=0.50, percentile=0.95, lower.v=F,
percentile.value=0.49, psi.percentile=0.52,
percentile.median=0.60, percentile95value=0.70)
temp
temp=findbetamupsi2(themean=0.50, percentile=0.95, lower.v=F,
percentile.value=0.49, psi.percentile=0.52,
percentile.median=0.60, percentile95value=0.70)
runApp()
runApp('C:/Users/kosta/Dropbox/ShinyApps/KOMY-Xartis/KOMY2')
runApp()
runApp()
cat("model{
for(i in 1:k){
y[i] ~ dbin(ap[i], n[i])
ap[i] <- main.p[i]*main.Se + (1-main.p[i])*(1-main.Sp)
main.p[i] <- pstar[i]
#informative hyperpior for prevalence
pstar[i] ~ dbeta(alpha,beta)
}
alpha <- main.mu*psi
beta <- psi*(1-main.mu)
main.mu ~ dbeta(amu, bmu) ## Mode=0.12, 95% sure < 0.30  dbeta(3.283, 17.744)
psi ~ dgamma(apsi, bpsi) ## Uses Median of 95th percentile of prevalence dgamma(4.524, 0.387)
#informative prior for Se and Sp
main.Se ~ dbeta(ase, bse) ## Mode=0.25; 95% sure < 0.30
main.Sp ~ dbeta(asp, bsp) ## Mode=0.98, 95% sure > 0.96
#informative prior for the probability of zero between group/herd prevalence
main.tau0 ~ dbeta(atau0, btau0) ## Mode=0.60, 95% sure < 0.827
#predictions
pre.pstar.rep ~ dbeta(alpha,beta)
pre.pequal0 <- equals(pre.pstar.rep,0)
pre.plessthan0.05 <- step(0.05-pre.pstar.rep)
}", file=paste("TruePreMultiple.txt"))
#data - list(k=35, n=70, y=c(2,0,3,0,1,2,2,3,6,0,8,1,13,2,1,3,1,7,2,2,0,4,1,4,2,6,1,4,0,6,4,2,0,12,33))
#initials - list(Se=0.25, Sp=0.98, mu=0.12, psi=11.69, tau0=0.60, pstar=c(rep(0.05,35)), z=c(rep(1,35), z.rep=0, pstar.rep=0.05))
SaveParams <- c("main.p","psi","main.Sp","main.Se","main.mu",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05")
# dtst<-dataset()
# dtst$positive
# dtst$n
# k=length(dtst$n) # k=5
κ=5
y=c(5,14,23,24,1)
n=c(100,110,111,123,132)
ase=asp=amu=apsi=a=1
bse=bsp=bmu=bpsi=b=10
atau0=0.1
btau0=0.5
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
a=a,b=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
cat("model{
for(i in 1:k){
y[i] ~ dbin(ap[i], n[i])
ap[i] <- main.p[i]*main.Se + (1-main.p[i])*(1-main.Sp)
main.p[i] <- pstar[i]
#informative hyperpior for prevalence
pstar[i] ~ dbeta(alpha,beta)
}
alpha <- main.mu*psi
beta <- psi*(1-main.mu)
main.mu ~ dbeta(amu, bmu) ## Mode=0.12, 95% sure < 0.30  dbeta(3.283, 17.744)
psi ~ dgamma(apsi, bpsi) ## Uses Median of 95th percentile of prevalence dgamma(4.524, 0.387)
#informative prior for Se and Sp
main.Se ~ dbeta(ase, bse) ## Mode=0.25; 95% sure < 0.30
main.Sp ~ dbeta(asp, bsp) ## Mode=0.98, 95% sure > 0.96
#informative prior for the probability of zero between group/herd prevalence
main.tau0 ~ dbeta(atau0, btau0) ## Mode=0.60, 95% sure < 0.827
#predictions
pre.pstar.rep ~ dbeta(alpha,beta)
pre.pequal0 <- equals(pre.pstar.rep,0)
pre.plessthan0.05 <- step(0.05-pre.pstar.rep)
}", file=paste("TruePreMultiple.txt"))
#data - list(k=35, n=70, y=c(2,0,3,0,1,2,2,3,6,0,8,1,13,2,1,3,1,7,2,2,0,4,1,4,2,6,1,4,0,6,4,2,0,12,33))
#initials - list(Se=0.25, Sp=0.98, mu=0.12, psi=11.69, tau0=0.60, pstar=c(rep(0.05,35)), z=c(rep(1,35), z.rep=0, pstar.rep=0.05))
SaveParams <- c("main.p","psi","main.Sp","main.Se","main.mu",
"pre.pstar.rep")
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
a=a,b=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
κ=5
y=c(5,14,23,24,1)
n=c(100,110,111,123,132)
ase=asp=amu=apsi=a=1
bse=bsp=bmu=bpsi=b=10
atau0=0.1
btau0=0.5
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
a=a,b=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
amu=a,bmu=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
y
n
κ
κ
k=5
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
amu=a,bmu=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=input$nniter,
n.thin=input$nnthin,
n.burnin=floor(input$nniter/10),
variable.names=SaveParams)
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=11100,
n.thin=5,
n.burnin=floor(11100/10),
variable.names=SaveParams)
cat("model{
for(i in 1:k){
y[i] ~ dbin(ap[i], n[i])
ap[i] <- main.p[i]*main.Se + (1-main.p[i])*(1-main.Sp)
main.p[i] <- main.pstar[i]
#informative hyperpior for prevalence
main.pstar[i] ~ dbeta(alpha,beta)
}
alpha <- main.mu*psi
beta <- psi*(1-main.mu)
main.mu ~ dbeta(amu, bmu) ## Mode=0.12, 95% sure < 0.30  dbeta(3.283, 17.744)
psi ~ dgamma(apsi, bpsi) ## Uses Median of 95th percentile of prevalence dgamma(4.524, 0.387)
#informative prior for Se and Sp
main.Se ~ dbeta(ase, bse) ## Mode=0.25; 95% sure < 0.30
main.Sp ~ dbeta(asp, bsp) ## Mode=0.98, 95% sure > 0.96
#informative prior for the probability of zero between group/herd prevalence
main.tau0 ~ dbeta(atau0, btau0) ## Mode=0.60, 95% sure < 0.827
#predictions
pre.pstar.rep ~ dbeta(alpha,beta)
pre.pequal0 <- equals(pre.pstar.rep,0)
pre.plessthan0.05 <- step(0.05-pre.pstar.rep)
}", file=paste("TruePreMultiple.txt"))
#data - list(k=35, n=70, y=c(2,0,3,0,1,2,2,3,6,0,8,1,13,2,1,3,1,7,2,2,0,4,1,4,2,6,1,4,0,6,4,2,0,12,33))
#initials - list(Se=0.25, Sp=0.98, mu=0.12, psi=11.69, tau0=0.60, pstar=c(rep(0.05,35)), z=c(rep(1,35), z.rep=0, pstar.rep=0.05))
SaveParams <- c("main.pstar","psi","main.Sp","main.Se","main.mu",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05")
# dtst<-dataset()
# dtst$positive
# dtst$n
# k=length(dtst$n) # k=5
k=5
y=c(5,14,23,24,1)
n=c(100,110,111,123,132)
ase=asp=amu=apsi=a=1
bse=bsp=bmu=bpsi=b=10
atau0=0.1
btau0=0.5
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
amu=a,bmu=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
#  update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=11100,
n.thin=5,
n.burnin=floor(11100/10),
variable.names=SaveParams)
cat("model{
for(i in 1:k){
y[i] ~ dbin(ap[i], n[i])
ap[i] <- main.pstar[i]*main.Se + (1-main.pstar[i])*(1-main.Sp)
#informative hyperpior for prevalence
main.pstar[i] ~ dbeta(alpha,beta)
}
alpha <- main.mu*psi
beta <- psi*(1-main.mu)
main.mu ~ dbeta(amu, bmu) ## Mode=0.12, 95% sure < 0.30  dbeta(3.283, 17.744)
psi ~ dgamma(apsi, bpsi) ## Uses Median of 95th percentile of prevalence dgamma(4.524, 0.387)
#informative prior for Se and Sp
main.Se ~ dbeta(ase, bse) ## Mode=0.25; 95% sure < 0.30
main.Sp ~ dbeta(asp, bsp) ## Mode=0.98, 95% sure > 0.96
#informative prior for the probability of zero between group/herd prevalence
main.tau0 ~ dbeta(atau0, btau0) ## Mode=0.60, 95% sure < 0.827
#predictions
pre.pstar.rep ~ dbeta(alpha,beta)
pre.pequal0 <- equals(pre.pstar.rep,0)
pre.plessthan0.05 <- step(0.05-pre.pstar.rep)
}", file=paste("TruePreMultiple.txt"))
SaveParams <- c("main.mu","psi","main.Sp","main.Se","main.mu",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05")
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
amu=a,bmu=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
#  update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=11100,
n.thin=5,
n.burnin=floor(11100/10),
variable.names=SaveParams)
SaveParams <- c("main.mu","psi","main.Sp","main.Se","main.pstar",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05")
# dtst<-dataset()
# dtst$positive
# dtst$n
# k=length(dtst$n) # k=5
k=5
y=c(5,14,23,24,1)
n=c(100,110,111,123,132)
ase=asp=amu=apsi=a=1
bse=bsp=bmu=bpsi=b=10
atau0=0.1
btau0=0.5
jagsoutput_TruezeroMult<-jags.model(data=list(n=n,y=y, k=k,
amu=a,bmu=b,
ase=ase, bse=bse,
asp=asp, bsp=bsp,
apsi=12, bpsi=15,
atau0=4, btau0=12),
inits=NULL, n.chains=2,
file=paste("TruezeroPreMultiple.txt"),quiet=TRUE)
#  update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=11100,
n.thin=5,
n.burnin=floor(11100/10),
variable.names=SaveParams)
SaveParams <- c("main.mu","psi","main.Sp","main.Se",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05")
#  update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=11100,
n.thin=5,
n.burnin=floor(11100/10),
variable.names=SaveParams)
runApp()
runApp()
shiny::runApp()
runApp('C:/Users/kosta/Dropbox/ShinyApps/KOMY-Xartis/KOMY2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?useShinydashboard
?valueBoxOutput
runApp()
runApp()
?useShinydashboard
runApp()
?valueBoxOutput
?renderPlotly
?renderDataTable
?datatable
require(DT)
runApp()
?renderValueBox
?valueBox
?multiroot
?gather
?jags.model
8+11+20+15+12
24+12+24+6
shiny::runApp()
?ggs
runApp()
multiroot
?rootSolve
?multiroot
getwd()
#  "knitr","psych",
install.packages("/APre_IWA/Functions/ggmcmc_1.5.1.1.tar.gz", repos = NULL, type="source")
ggs
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?multiroot
runApp()
runApp()
runApp()
runApp()
?perturb
runApp()
?"rootSolve"
?perturb
install.packages("perturb")
runApp()
?perturb
install.packages("perturb")
#  ,,
install.packages("/APre_IWA/Functions/perturb_2.10.tar.gz", repos = NULL, type="source")
runApp()
#  ,,
install.packages("perturb_2.10.tar.gz", repos = NULL, type="source",
dependencies = TRUE)
require(perturb_2.10)
require(perturb)
require(perturb)
install.packages("perturb")
#  ,,
library(devtools)
install.packages("/APre_IWA/Functions/perturb_2.10.tar.gz", repos = NULL, type="source",
dependencies = TRUE)
install.packages("Rtools")
find_rtools(
)
?perturb
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
