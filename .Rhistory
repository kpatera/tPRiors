runApp()
shiny::runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
Model1.mcmc
Model1.mcmc[[1]][,1])[,1]
Model1.mcmc[[1]][,1])
Model1.mcmc[[1]][,1]
temp=Model1.mcmc[[1]]
temp=data.frame(Model1.mcmc[[1]])
temp$main.ap
data.frame(Model1.mcmc[[1]][,1])[,1])
data.frame(Model1.mcmc[[1]][,1])[,1]
data.frame(Model1.mcmc[[1]][,1])
temp=data.frame(Model1.mcmc[[1]][,1])
temp$var1
runApp()
namas(Model1.mcmc_df)
names(Model1.mcmc_df)
names(Model1.mcmc)
#Simple plot
#plot(density(Model1.mcmc[[1]][,1]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
#lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
#ggplot
Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
names(Model1.mcmc_df)
runApp()
cat("model{
for(i in 1:k){
y[i] ~ dbin(ap[i], n[i])
ap[i] <- sub.p[i]*main.Se + (1-sub.p[i])*(1-main.Sp)
#informative hyperpior for prevalence
sub.p[i] ~ dbeta(alpha,beta) T(0.001,0.999)
}
alpha <- main.ap*main.psi
beta <- main.psi*(1-main.ap)
main.ap ~ dbeta(amu, bmu) T(0.001,0.999)
main.psi ~ dgamma(apsi, bpsi) T(0.001,0.999)
#informative prior for Se and Sp
main.Se ~ dbeta(ase, bse) T(0.001,0.999)
main.Sp ~ dbeta(asp, bsp) T(0.001,0.999)
#predictions
y.pre ~ dbin(main.ap,m)
pre.pstar.rep ~ dbeta(alpha,beta)
pre.pequal0 <- equals(pre.pstar.rep,0)
pre.plessthan0.05 <- step(0.05-pre.pstar.rep)
plessthanSetvalue <- step(perVal-main.ap)
}", file=paste("TrePreMultiple.txt"))
SaveParams <- c("main.ap","psi","main.Sp","main.Se","y.pre",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05","sub.p","plessthanSetvalue")
dtst<-dataset()
dtst$region<-factor(dtst$region)
dtst$country<-factor(dtst$country)
dtst$ID<-1:length(dtst$region)
dtst=Data2
dtst$region<-factor(dtst$region)
dtst$country<-factor(dtst$country)
dtst$ID<-1:length(dtst$region)
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=2, bse=12,
asp=2, bsp=12,
amu=2, bmu=12,
apsi=2, bpsi=12,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(10000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=input$nniter,thin =input$nnthin,
variable.names=SaveParams,seed=998)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
SaveParams <- c("main.ap","main.psi","main.Sp","main.Se","y.pre",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05","sub.p","plessthanSetvalue")
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=2, bse=12,
asp=2, bsp=12,
amu=2, bmu=12,
apsi=2, bpsi=12,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=3000,thin =4,
variable.names=SaveParams,seed=998)
renderPlotly({
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
})
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=2, bse=1,
asp=2, bsp=1,
amu=2, bmu=1,
apsi=2, bpsi=1,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=3000,thin =4,
variable.names=SaveParams,seed=998)
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=21, bse=1,
asp=21, bsp=1,
amu=21, bmu=1,
apsi=21, bpsi=1,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=3000,thin =4,
variable.names=SaveParams,seed=998)
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
runApp()
Data1
dtst=Data2
dtst=Data1
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=21, bse=1,
asp=21, bsp=1,
amu=21, bmu=1,
apsi=21, bpsi=1,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=input$nniter,thin =input$nnthin,
variable.names=SaveParams,seed=998)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
yc=rnorm(100,0,1)
ye=rnorm(100,0,1+4)
plot(density(ye))
yc=rnorm(10000,0,1)
ye=rnorm(10000,0,1+4)
plot(density(ye))
par(mfrow=c(3,1))
plot(density(ye))
plot(density(ye))
plot(density(yc))
plot(density(yc-ye))
contour(ye,yc)
contour(x = ye,y = yc)
library(plotly)
library(stringr)
library(reshape2)
data.loess <- loess(qsec ~ wt * hp, data = mtcars)
# Create a sequence of incrementally increasing (by 0.3 units) values for both wt and hp
xgrid <-  seq(min(mtcars$wt), max(mtcars$wt), 0.3)
ygrid <-  seq(min(mtcars$hp), max(mtcars$hp), 0.3)
# Generate a dataframe with every possible combination of wt and hp
data.fit <-  expand.grid(wt = xgrid, hp = ygrid)
# Feed the dataframe into the loess model and receive a matrix output with estimates of
# acceleration for each combination of wt and hp
mtrx3d <-  predict(data.loess, newdata = data.fit)
# Abbreviated display of final matrix
mtrx3d[1:4, 1:4]
##           hp
## wt         hp= 52.0 hp= 52.3 hp= 52.6 hp= 52.9
##   wt=1.513 19.04237 19.03263 19.02285 19.01302
##   wt=1.813 19.25566 19.24637 19.23703 19.22764
##   wt=2.113 19.55298 19.54418 19.53534 19.52645
##   wt=2.413 20.06436 20.05761 20.05077 20.04383
# Transform data to long form
mtrx.melt <- melt(mtrx3d, id.vars = c('wt', 'hp'), measure.vars = 'qsec')
names(mtrx.melt) <- c('wt', 'hp', 'qsec')
# Return data to numeric form
mtrx.melt$wt <- as.numeric(str_sub(mtrx.melt$wt, str_locate(mtrx.melt$wt, '=')[1,1] + 1))
mtrx.melt$hp <-  as.numeric(str_sub(mtrx.melt$hp, str_locate(mtrx.melt$hp, '=')[1,1] + 1))
fig <- plot_ly(mtrx.melt, x = ~wt, y = ~hp, z = ~qsec, type = "contour",
width = 600, height = 500)
fig
mtcars<-data.frame(yc1=rnorm(10000,0,1),
ye1=rnorm(10000,0,3),
yc2=rnorm(10000,0,2),
ye2=rnorm(10000,0,2))
mtcars
# Create a sequence of incrementally increasing (by 0.3 units) values for both wt and hp
xgrid <-  seq(min(mtcars$yc1), max(mtcars$yc1), 0.3)
ygrid <-  seq(min(mtcars$ye1), max(mtcars$ye1), 0.3)
xgrid
ygrid
# Generate a dataframe with every possible combination of wt and hp
data.fit <-  expand.grid(wt = xgrid, hp = ygrid)
data.fit
install.packages("KernSmooth")
library(KernSmooth)
xgrid
mtcars
mtcars[,1:2]
bkde2D(mtcars[,1:2])
bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
contour(est1$x1, est1$x2, est1$fhat)
par(mfrow=c(2,1))
est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
contour(est1$x1, est1$x2, est1$fhat)
est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
contour(est2$x1, est2$x2, est2$fhat)
par(mfrow=c(1,2))
est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
contour(est1$x1, est1$x2, est1$fhat)
est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
contour(est2$x1, est2$x2, est2$fhat)
mtcars
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
mtcars$D1
par(mfrow=c(1,3))
est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
contour(est1$x1, est1$x2, est1$fhat)
est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
summary(mtcars$D1)
summary(mtcars$D2)
sd(mtcars$D2)
sd(mtcars$D1)
mtcars<-data.frame(yc1=rnorm(1000000,0,1),
ye1=rnorm(1000000,0,3),
yc2=rnorm(1000000,0,2),
ye2=rnorm(1000000,0,2))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
sd(D1);sd(D2)
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,3.9),
yc2=rnorm(1000000,0,2),
ye2=rnorm(1000000,0,2))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,9.9),
yc2=rnorm(1000000,0,5),
ye2=rnorm(1000000,0,5))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,99.9),
yc2=rnorm(1000000,0,50),
ye2=rnorm(1000000,0,50))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,999.9),
yc2=rnorm(1000000,0,500),
ye2=rnorm(1000000,0,500))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,999.9),
yc2=rnorm(1000000,0,500),
ye2=rnorm(1000000,0,500))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,999.9),
yc2=rnorm(1000000,0,500),
ye2=rnorm(1000000,0,500))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,999.9),
yc2=rnorm(1000000,0,500),
ye2=rnorm(1000000,0,500))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7))
contour(est3$x1, est3$x2, est3$fhat)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(101L, 101L))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,999.9),
yc2=rnorm(1000000,0,500),
ye2=rnorm(1000000,0,500))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(101L, 101L))
contour(est3$x1, est3$x2, est3$fhat)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(201L, 201L))
contour(est3$x1, est3$x2, est3$fhat)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(71L, 71L))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,9999.9),
yc2=rnorm(1000000,0,5000),
ye2=rnorm(1000000,0,5000))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(71L, 71L))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,9999.9),
yc2=rnorm(1000000,0,5000),
ye2=rnorm(1000000,0,5000))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(71L, 71L))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,9999.9),
yc2=rnorm(1000000,0,5000),
ye2=rnorm(1000000,0,5000))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(71L, 71L))
contour(est3$x1, est3$x2, est3$fhat)
mtcars<-data.frame(yc1=rnorm(1000000,0,0.1),
ye1=rnorm(1000000,0,9999.9),
yc2=rnorm(1000000,0,5000),
ye2=rnorm(1000000,0,5000))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(71L, 71L))
contour(est3$x1, est3$x2, est3$fhat)
# par(mfrow=c(1,3))
# est1<-bkde2D(mtcars[,1:2],bandwidth=c(0.7, 7))
# contour(est1$x1, est1$x2, est1$fhat)
# est2<-bkde2D(mtcars[,3:4],bandwidth=c(0.7, 7))
# contour(est2$x1, est2$x2, est2$fhat)
est3<-bkde2D(mtcars[,5:6],bandwidth=c(0.7, 7),gridsize = c(91L, 91L))
contour(est3$x1, est3$x2, est3$fhat)
sd(mtcars$D1);sd(mtcars$D2)
summary(mtcars$D1);summary(mtcars$D2)
10000/7000
7000/10000
var(mtcars$D1);var(mtcars$D2)
sqrt(10000)
mtcars<-data.frame(yc1=rnorm(1000000,0,sd = 0.1),
ye1=rnorm(1000000,0,sd = 9.9),
yc2=rnorm(1000000,0,sd = 5),
ye2=rnorm(1000000,0,sd = 5))
mtcars$D1=mtcars$ye1-mtcars$yc1
mtcars$D2=mtcars$ye2-mtcars$yc2
sd(mtcars$D1);sd(mtcars$D2)
9.91/7.08
