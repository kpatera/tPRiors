(Poso)/Foros2+Asf1
(Poso)/Foros2+Asf2
#Scenario 3 - Main Scenario+travels, Start, Competitive 3 38400euros/year
#-37104 - 44251
Profit=3300;Poso=Profit*k/PErate
(Poso)/Foros1+Asf1
(Poso)/Foros1+Asf2
(Poso)/Foros2+Asf1
(Poso)/Foros2+Asf2
#Scenario 4 - Extented Scenario, 2nd year, + 1 colleague + travle. 52000-56000euros/year
Profit=3300;Poso=Salary*k/PErate
(Poso)/Foros1+Asf1
(Poso)/Foros1+Asf2
(Poso)/Foros2+Asf1
(Poso)/Foros2+Asf2
#Scenario 4 - Extented Scenario, 2nd year, + 1 colleague + travle. 52000-56000euros/year
#-44239 - 52418
Profit=4000;Poso=Salary*k/PErate
(Poso)/Foros1+Asf1
(Poso)/Foros1+Asf2
(Poso)/Foros2+Asf1
(Poso)/Foros2+Asf2
#Scenario 4 - Extented Scenario, 2nd year, + 1 colleague + travle. 52000-56000euros/year
#-44239 - 52418
Profit=4000;Poso=Profit*k/PErate
(Poso)/Foros1+Asf1
(Poso)/Foros1+Asf2
(Poso)/Foros2+Asf1
(Poso)/Foros2+Asf2
#
Profit=2700;k=12;PErate
#
Profit=2700;k=12;PErate=1.16;Foros1=0.75;Asf1=7500
(Profit*k/PErate)/Foros1+Asf1
PErate=1.05:1.25
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(Gross,PErate)
PErate
PErate=seq(1.05,1.25,by=0.01)
PErate
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(Gross,PErate)
plot(PErate,Gross)
Profit=seq(1800,4000,by=200);
#PErate=seq(1.05,1.25,by=0.01)
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(PErate,Gross)
k=12;Foros1=0.75;Asf1=7500;PErate=1.16
Profit=seq(1800,4000,by=200);
Profit
#PErate=seq(1.05,1.25,by=0.01)
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(PErate,Gross)
plot(Profit,Gross)
#PErate=seq(1.05,1.25,by=0.01)
par(mfrow=c(2,1))
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(Profit,Gross)
#PErate=seq(1.05,1.25,by=0.01)
par(mfrow=c(1,2))
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(Profit,Gross)
k=12;Foros1=0.87;Asf1=5000;PErate=1.16
Profit=seq(1800,4000,by=200);
Gross=(Profit*k/PErate)/Foros1+Asf1
plot(Profit,Gross)
k=12;Foros1=0.87;Asf1=5000;PErate=1.16
Profit=seq(1800,4000,by=200);#PErate=seq(1.05,1.25,by=0.01)
Gross1=(Profit*k/PErate)/Foros1+Asf1
k=12;Foros1=0.75;Asf1=7500;PErate=1.12
Gross2=(Profit*k/PErate)/Foros1+Asf1
plot(Profit,Gross1,type="l")
lines(Profit,Gross2,type="l",col="red")
plot(Profit,Gross1,type="l",ylab = "Gross income")
lines(Profit,Gross2,type="l",col="red",ylab = "Net montly income"))
lines(Profit,Gross2,type="l",col="red",ylab = "Net montly income")
lines(y=c(0,10000),x = 2700)
abline(y=c(0,10000),x = 2700)
abline(h = 2700)
abline(h = 2700,v = 0)
abline(h = c(2700,2700),v = c(0,10000))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=fb_SE$a, bse=fb_SE$b,
asp=fb_SP$a, bsp=fb_SP$b,
amu=fb$abeta, bmu=fb$bbeta,
apsi=fb$abeta, bpsi=fb$bbeta,
perVal=input$perVal),
inits=NULL, n.chains=input$nchains,n.adapt = floor(input$nniter/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
runApp()
runApp()
alpha
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
findbetamupsi2
runApp()
runApp()
fb
runApp()
runApp()
runApp()
runApp()
data.frame(read_excel("Data/efs31678e-sup-0004-annex_d.xlsx"))
data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_NonAttica.xlsx"))
data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_Attica.xlsx"))
data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_NonAttica.xlsx"))
data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_Attica.xlsx"))
dim(data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_Attica.xlsx")))
dim(data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_NonAttica.xlsx")))
dim(data.frame(read_excel("Data/efs31678e-sup-0004-annex_d.xlsx")))
runApp()
shiny::runApp()
shiny::runApp()
summary(Model1.mcmc$main.pstar.rep)
summary(x)
x=1:100
summary(x)
round(summary(x))
round(summary(x),2)
runApp()
?req
req(!is.na(input$Indata2))
req(!is.na(Indata2))
shiny::runApp()
shiny::runApp()
Model1.mcmc
Model1.mcmc[[1]]
head(Model1.mcmc[[1]])
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# OPEN (Moderate) Timer for priors/analysis.
# 2. OPEN (Large) - Allow for the ability to change different options (i.e. mean median percentile)
#for different prior specifications. So can we move this option at the beginning of each prior tag?
#---- Load packages ----#
packages.list<-c("shiny","shinythemes","shinyWidgets","shinydashboard",
"PriorGen","R2jags","ggplot2","tidyr","rjags",
"shinyjs","rmarkdown","markdown","plotly","ggmcmc","knitr","shinyalert",
"grid","DT","readxl","gridExtra","psych","rootSolve","devtools") # ,
#packages.new <- packages.list[!(packages.list %in% installed.packages()[,"Package"])]
#install.packages(packages.new);rm(packages.new)
lapply(packages.list, require, character.only = TRUE); rm(packages.list)
#---- Load functions and extra functionss ----#
Funcs<-c("findbeta2.R","findbetaqq2.R","findbetamupsi.R","findbetamupsi2.R","ggs_density.R",
"get_family.R","multiroot.R","perturb.R","gss.R")
invisible(lapply(Funcs,function(i){ source(paste("Functions/",i,sep="")) }))
#---- Create temp variable for Rmarkdown reports and plotting ----#
fb<-list(1,1)
#---- Load pre-loaded datasets ----#
require(readxl)
Example1_4Studies <<- data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_4studies.xlsx"))
Example2_40Studies <<- data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_Attica.xlsx"))
#Example3_102Studies <<- data.frame(read_excel("Data/efs31678e-sup-0004-annex_d_NonAttica.xlsx"))
Example4_129studies <<- data.frame(read_excel("Data/efs31678e-sup-0004-annex_d.xlsx"))
name_data<-"sidebar user input"
shiny::runApp('~/sample-apps/tPRiors')
runApp('~/sample-apps/tPRiors')
runApp('~/sample-apps/tPRiors')
runApp('~/sample-apps/tPRiors')
runApp('~/sample-apps/tPRiors')
runApp('~/sample-apps/tPRiors')
runApp('~/sample-apps/tPRiors')
require(plotly)
devtools;intall-github('ropensci/plotly')
devtools::install-github('ropensci/plotly')
devtools::install_github('ropensci/plotly')
require("ropensci/plotly")
runApp('/srv/shiny-server/Uth_Epi/tPRiors')
runApp('/srv/shiny-server/Uth_Epi/tPRiors')
runApp('/srv/shiny-server/Uth_Epi/tPRiors')
?v
?plot_ly
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fisher.test()
?fisher.test()
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
fisher.test(TeaTasting, alternative = "greater")
TeaTasting
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Control", "Exper"),
Truth = c("Event", "Nevent")))
fisher.test(TeaTasting, alternative = "greater")
TeaTasting
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Event", "ExpNeventer"),
Truth = c("Control", "Exper")))
TeaTasting
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(AE = c("Event", "ExpNeventer"),
Group = c("Control", "Exper")))
AE1 <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(AE = c("Event", "ExpNeventer"),
Group = c("Control", "Exper")))
AE1
AE1 <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(AE = c("Event", "Non-eventer"),
Group = c("Control", "Exper")))
AE1
AE1 <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(AE = c("Event", "Non-event"),
Group = c("Control", "Exper")))
AE1
AE1 <-
matrix(c(0, 10, 0, 10),
nrow = 2,
dimnames = list(AE = c("Event", "Non-event"),
Group = c("Control", "Exper")))
AE2 <-
matrix(c(0, 1000, 0, 1000),
nrow = 2,
dimnames = list(AE = c("Event", "Non-event"),
Group = c("Control", "Exper")))
AE1
fisher.test(AE1, alternative = "two.sided")
fisher.test(AE2, alternative = "two.sided")
fisher.test(AE1, alternative = "two.sided")$p.value
fisher.test(AE2, alternative = "two.sided")$p.value
chisq.test(AE1, alternative = "two.sided")$p.value
chisq.test(AE1)$p.value
chisq.test(AE1)
?bayesglm
install.packages("bayesglm")
y <-rep(0,10)
x <- rep(0,10)
y
x
N <- length(y)
N
# Bayesian simple logistic
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dbern(p[i])
logit(p[i]) <- beta0 + beta1*x[i]
}
## priors
beta1 <- (logit(p1) - logit(p2)) / (x1 - x2)
beta0 <- logit(p1) - beta1 * x1
p1 ~ dbeta(a1, b1)
p2 ~ dbeta(a2, b2)
}
}", file=paste("BayesLogistic.txt"))
y <-rep(0,10)
x <- rep(0,10)
N <- length(y)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 2.52, "b1" = 20.08,
"a2" = 20.59, "b2" = 9.01,
"x1" = 20, "x2" = 80)
SaveParams <- c("beta0","beta1","p1","p2")
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=2,
n.adapt = floor(10000/10),
file=paste("TrePreMultiple.txt"),
quiet=TRUE)
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=2,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
# Bayesian simple logistic
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dbern(p[i])
logit(p[i]) <- beta0 + beta1*x[i]
}
## priors
beta1 <- (logit(p1) - logit(p2)) / (x1 - x2)
beta0 <- logit(p1) - beta1 * x1
p1 ~ dbeta(a1, b1)
p2 ~ dbeta(a2, b2)
}", file=paste("BayesLogistic.txt"))
y <-rep(0,10)
x <- rep(0,10)
N <- length(y)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 2.52, "b1" = 20.08,
"a2" = 20.59, "b2" = 9.01,
"x1" = 20, "x2" = 80)
SaveParams <- c("beta0","beta1","p1","p2")
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=2,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_BayesLogist,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
Model1.mcmc
summary(Model1.mcmc)
summary(Model1.mcmc)$parameters
sum_Model1.mcmc<-summary(Model1.mcmc)
sum_Model1.mcmc$statistics
y <-rep(0,10) ; y2 <-rep(0,1000)
x <- rep(0,10) ; x2 <- rep(0,1000)
N <- length(y) ; N2 <- length(y2)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 2.52, "b1" = 20.08,
"a2" = 20.59, "b2" = 9.01,
"x1" = 20, "x2" = 80)
the_data2<-the_data
the_data2$y
the_data2$y<-y2;the_data2$x<-x2;the_data2$N<-N2
the_data2
jagsoutput_BayesLogist2<-rjags::jags.model(data=the_data2,
inits=NULL, n.chains=2,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model2.mcmc <<- coda.samples(jagsoutput_BayesLogist2,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model2.mcmc<-summary(Model2.mcmc)
sum_Model1.mcmc$statistics
sum_Model2.mcmc$statistics
plot(Model1.mcmc)
plot(Model1.mcmc)
plot(Model1.mcmc)
plot(Model1.mcmc)
plot(Model1.mcmc)
head(Model1.mcmc)
Model1.mcmc[,2]
plot(density(Model1.mcmc[,2]))
plot(density(Model1.mcmc[2,]))
plot(density(as.mcmc(Model1.mcmc)[,2]))
# Data 1
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_BayesLogist,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model1.mcmc<-summary(Model1.mcmc)
# Data 2
jagsoutput_BayesLogist2<-rjags::jags.model(data=the_data2,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model2.mcmc <<- coda.samples(jagsoutput_BayesLogist2,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model2.mcmc<-summary(Model2.mcmc)
sum_Model1.mcmc$statistics
sum_Model2.mcmc$statistics
plot(density(as.mcmc(Model1.mcmc)[,2]))
lines(density(as.mcmc(Model2.mcmc)[,2]),col="red")
plot(density(as.mcmc(Model2.mcmc)[,2]))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.17))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
# The data 1 - The data 2.
y <-rep(0,10) ; y2 <-rep(0,1000)
x <- rep(0,10) ; x2 <- rep(0,1000)
N <- length(y) ; N2 <- length(y2)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 1, "b1" = 1,
"a2" = 1, "b2" = 1,
"x1" = 20, "x2" = 80)
the_data2<-the_data
the_data2$y<-y2;the_data2$x<-x2;the_data2$N<-N2
SaveParams <- c("beta0","beta1","p1","p2")
# Data 1
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_BayesLogist,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model1.mcmc<-summary(Model1.mcmc)
# Data 2
jagsoutput_BayesLogist2<-rjags::jags.model(data=the_data2,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model2.mcmc <<- coda.samples(jagsoutput_BayesLogist2,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model2.mcmc<-summary(Model2.mcmc)
sum_Model1.mcmc$statistics
sum_Model2.mcmc$statistics
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.17))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.25))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
# The data 1 - The data 2.
y <-rep(0,10) ; y2 <-rep(0,1000); y1 <-rep(0,100)
x <- rep(0,10) ; x2 <- rep(0,1000); x1 <- rep(0,100)
N <- length(y) ; N2 <- length(y2); N1 <- length(y1)
the_data <- list("y" = y, "x" = x, "N" = N,
"a1" = 1, "b1" = 1,
"a2" = 1, "b2" = 1,
"x1" = 20, "x2" = 80)
the_data2<-the_data1<-the_data
the_data2$y<-y2;the_data2$x<-x2;the_data2$N<-N2
the_data1$y<-y1;the_data1$x<-x1;the_data1$N<-N1
SaveParams <- c("beta0","beta1","p1","p2")
# Data 1
jagsoutput_BayesLogist<-rjags::jags.model(data=the_data,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model.mcmc <<- coda.samples(jagsoutput_BayesLogist,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model.mcmc<-summary(Model.mcmc)
# Data 2
jagsoutput_BayesLogist1<-rjags::jags.model(data=the_data1,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_BayesLogist1,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model1.mcmc<-summary(Model1.mcmc)
# Data 3
jagsoutput_BayesLogist2<-rjags::jags.model(data=the_data2,
inits=NULL, n.chains=1,
n.adapt = floor(10000/10),
file=paste("BayesLogistic.txt"),
quiet=TRUE)
Model2.mcmc <<- coda.samples(jagsoutput_BayesLogist2,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
sum_Model2.mcmc<-summary(Model2.mcmc)
sum_Model.mcmc$statistics
sum_Model1.mcmc$statistics
sum_Model2.mcmc$statistics
plot(density(as.mcmc(Model2.mcmc)[,2]),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2]),col="red")
lines(density(as.mcmc(Model.mcmc)[,2]),col="blue")
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 2),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 3),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.2),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topleft",col = c("black","red","blue"),legend = c(".","...",".."))
legend("topright",col = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"),lty = c("l","l","l"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15))
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
plot(density(as.mcmc(Model2.mcmc)[,2],adjust = 1.5),xlim=c(0,0.25),ylim=c(0,15),
main="Proof of concept - Bayes simple",xlab = "",ylab = "Posterior densities")
lines(density(as.mcmc(Model1.mcmc)[,2],adjust = 1.5),col="red")
lines(density(as.mcmc(Model.mcmc)[,2],adjust = 1.5),col="blue")
legend("topright",col = c("black","red","blue"), fill = c("black","red","blue"),legend = c("N=10","N=100","N=1000"))
shiny::runApp()
runApp()
