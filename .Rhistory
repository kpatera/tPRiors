region
y=c(1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 3.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 2.00000E+00, 0.00000E+00, 2.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.30000E+01, 3.30000E+01, 4.50000E+01, 2.40000E+01, 2.80000E+01, 2.90000E+01, 3.30000E+01, 2.30000E+01, 1.40000E+01, 3.70000E+01, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 0.00000E+00, 2.00000E+00, 2.00000E+00, 1.00000E+00, 2.00000E+00, 4.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 0.00000E+00, 3.00000E+00, 0.00000E+00, 3.00000E+00, 3.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 0.00000E+00, 3.00000E+00, 1.00000E+00, 2.00000E+00, 1.00000E+00, 2.40000E+01, 3.40000E+01, 2.60000E+01, 2.00000E+00, 2.30000E+01, 2.40000E+01, 4.40000E+01, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.70000E+01, 2.20000E+01, 1.30000E+01, 2.80000E+01, 1.80000E+01, 3.40000E+01, 2.20000E+01, 2.10000E+01, 4.40000E+01, 1.10000E+01, 2.30000E+01, 7.00000E+00, 9.00000E+00, 1.10000E+01, 1.20000E+01, 1.30000E+01, 1.40000E+01, 1.50000E+01, 1.60000E+01, 2.20000E+01, 2.00000E+00, 1.00000E+00, 2.00000E+00, 1.10000E+01, 2.10000E+01, 4.00000E+00, 2.30000E+01, 7.00000E+00, 2.80000E+01)
y
n=c(1.07000E+02, 9.20000E+01, 1.14000E+02, 1.21000E+02, 1.05000E+02, 9.20000E+01, 9.30000E+01, 8.00000E+01, 1.12000E+02, 9.40000E+01, 1.30000E+02, 1.45000E+02, 9.20000E+01, 1.09000E+02, 1.45000E+02, 1.01000E+02, 9.40000E+01, 1.32000E+02, 1.29000E+02, 1.46000E+02, 1.42000E+02, 1.02000E+02, 1.11000E+02, 1.07000E+02, 1.43000E+02, 9.00000E+01, 1.10000E+02, 8.60000E+01, 9.60000E+01, 1.09000E+02, 9.90000E+01, 1.13000E+02, 8.80000E+01, 9.00000E+01, 1.14000E+02, 8.30000E+01, 1.20000E+02, 1.33000E+02, 1.36000E+02, 1.27000E+02, 8.30000E+01, 8.70000E+01, 9.40000E+01, 9.70000E+01, 1.12000E+02, 1.14000E+02, 1.30000E+02, 1.31000E+02, 1.39000E+02, 1.46000E+02, 8.00000E+01, 1.10000E+02, 9.60000E+01, 1.35000E+02, 1.07000E+02, 9.80000E+01, 1.40000E+02, 1.06000E+02, 1.50000E+02, 8.10000E+01, 1.11000E+02, 1.02000E+02, 9.00000E+01, 8.60000E+01, 1.11000E+02, 1.05000E+02, 1.26000E+02, 1.40000E+02, 1.42000E+02, 1.35000E+02, 1.35000E+02, 1.36000E+02, 1.29000E+02, 1.43000E+02, 1.35000E+02, 1.26000E+02, 1.21000E+02, 1.01000E+02, 1.02000E+02, 1.27000E+02, 1.45000E+02, 1.27000E+02, 8.50000E+01, 9.50000E+01, 9.70000E+01, 9.90000E+01, 1.04000E+02, 1.05000E+02, 1.17000E+02, 1.33000E+02, 1.44000E+02, 1.37000E+02, 1.11000E+02, 1.35000E+02, 1.22000E+02, 1.25000E+02, 1.04000E+02, 1.38000E+02, 1.05000E+02, 1.48000E+02, 8.90000E+01, 8.80000E+01, 1.05000E+02, 1.10000E+02, 1.33000E+02, 1.34000E+02, 1.41000E+02, 1.41000E+02, 1.45000E+02, 9.10000E+01, 9.70000E+01, 1.08000E+02, 1.16000E+02, 1.31000E+02, 1.50000E+02, 1.45000E+02, 1.11000E+02, 1.15000E+02, 1.36000E+02, 1.41000E+02, 1.26000E+02, 1.31000E+02, 9.00000E+01, 1.01000E+02, 1.02000E+02, 1.03000E+02, 1.09000E+02, 1.34000E+02, 1.33000E+02)
Data<-list(
region=c(1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 4.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 5.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 6.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 7.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 8.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 9.00000E+00, 1.00000E+01, 1.00000E+01, 1.00000E+01, 1.00000E+01, 1.00000E+01, 1.00000E+01, 1.00000E+01, 1.00000E+01, 1.00000E+01),
y=c(1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 3.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 2.00000E+00, 0.00000E+00, 2.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.30000E+01, 3.30000E+01, 4.50000E+01, 2.40000E+01, 2.80000E+01, 2.90000E+01, 3.30000E+01, 2.30000E+01, 1.40000E+01, 3.70000E+01, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 0.00000E+00, 2.00000E+00, 2.00000E+00, 1.00000E+00, 2.00000E+00, 4.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 0.00000E+00, 3.00000E+00, 0.00000E+00, 3.00000E+00, 3.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 0.00000E+00, 3.00000E+00, 1.00000E+00, 2.00000E+00, 1.00000E+00, 2.40000E+01, 3.40000E+01, 2.60000E+01, 2.00000E+00, 2.30000E+01, 2.40000E+01, 4.40000E+01, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.70000E+01, 2.20000E+01, 1.30000E+01, 2.80000E+01, 1.80000E+01, 3.40000E+01, 2.20000E+01, 2.10000E+01, 4.40000E+01, 1.10000E+01, 2.30000E+01, 7.00000E+00, 9.00000E+00, 1.10000E+01, 1.20000E+01, 1.30000E+01, 1.40000E+01, 1.50000E+01, 1.60000E+01, 2.20000E+01, 2.00000E+00, 1.00000E+00, 2.00000E+00, 1.10000E+01, 2.10000E+01, 4.00000E+00, 2.30000E+01, 7.00000E+00, 2.80000E+01),
n=c(1.07000E+02, 9.20000E+01, 1.14000E+02, 1.21000E+02, 1.05000E+02, 9.20000E+01, 9.30000E+01, 8.00000E+01, 1.12000E+02, 9.40000E+01, 1.30000E+02, 1.45000E+02, 9.20000E+01, 1.09000E+02, 1.45000E+02, 1.01000E+02, 9.40000E+01, 1.32000E+02, 1.29000E+02, 1.46000E+02, 1.42000E+02, 1.02000E+02, 1.11000E+02, 1.07000E+02, 1.43000E+02, 9.00000E+01, 1.10000E+02, 8.60000E+01, 9.60000E+01, 1.09000E+02, 9.90000E+01, 1.13000E+02, 8.80000E+01, 9.00000E+01, 1.14000E+02, 8.30000E+01, 1.20000E+02, 1.33000E+02, 1.36000E+02, 1.27000E+02, 8.30000E+01, 8.70000E+01, 9.40000E+01, 9.70000E+01, 1.12000E+02, 1.14000E+02, 1.30000E+02, 1.31000E+02, 1.39000E+02, 1.46000E+02, 8.00000E+01, 1.10000E+02, 9.60000E+01, 1.35000E+02, 1.07000E+02, 9.80000E+01, 1.40000E+02, 1.06000E+02, 1.50000E+02, 8.10000E+01, 1.11000E+02, 1.02000E+02, 9.00000E+01, 8.60000E+01, 1.11000E+02, 1.05000E+02, 1.26000E+02, 1.40000E+02, 1.42000E+02, 1.35000E+02, 1.35000E+02, 1.36000E+02, 1.29000E+02, 1.43000E+02, 1.35000E+02, 1.26000E+02, 1.21000E+02, 1.01000E+02, 1.02000E+02, 1.27000E+02, 1.45000E+02, 1.27000E+02, 8.50000E+01, 9.50000E+01, 9.70000E+01, 9.90000E+01, 1.04000E+02, 1.05000E+02, 1.17000E+02, 1.33000E+02, 1.44000E+02, 1.37000E+02, 1.11000E+02, 1.35000E+02, 1.22000E+02, 1.25000E+02, 1.04000E+02, 1.38000E+02, 1.05000E+02, 1.48000E+02, 8.90000E+01, 8.80000E+01, 1.05000E+02, 1.10000E+02, 1.33000E+02, 1.34000E+02, 1.41000E+02, 1.41000E+02, 1.45000E+02, 9.10000E+01, 9.70000E+01, 1.08000E+02, 1.16000E+02, 1.31000E+02, 1.50000E+02, 1.45000E+02, 1.11000E+02, 1.15000E+02, 1.36000E+02, 1.41000E+02, 1.26000E+02, 1.31000E+02, 9.00000E+01, 1.01000E+02, 1.02000E+02, 1.03000E+02, 1.09000E+02, 1.34000E+02, 1.33000E+02),
observations=1.29000E+02, regions=1.00000E+01,
ase1=6.32000E+01, bse1=3.33000E+00, asp1=1.01430E+02, bsp1=1.12700E+01,
amu=2.02700E+01, bmu=8.10700E+01, apsi=8.97000E+00, bpsi=2.79000E+00,
ahp=2.40000E+00, bhp=9.61000E+00, arp=6.24000E+00, brp=1.45500E+01)
Data
inits<-list(psi=5.00000E-01)
1.29000E+02
generic_jags<-jagsoutput_TruezeroMult<-rjags::jags.model(data=list(n=Data$n,y=Data$y,
observations=Data$observations,
regions=Data$region,
amu=Data$amu, bmu=Data$bmu,
apsi=Data$apsi, bpsi=Data$bpsi,
ahp=Data$ahp,bhp=Data$bhp,
arp=Data$arp,brp=Data$brp,
ase1=Data$ase1,bse1=Data$bse1,
asp1=Data$asp1,bsp1=Data$bsp1),
inits=NULL, n.chains=2,
n.adapt = floor(100000/10),
file=paste("AppPreMultiple.txt")) # ,quiet=TRUE
cat("model{
for (i in 1:observations) {
#app_p:apparent prevalence
y[i] ~ dbin(app_p[i], n[i])
#animal_p: animal prevalence
#Se:sensitivity
#Sp:specificity
app_p[i] <- animal_p[i] * Se + (1 - animal_p[i]) * (1 - Sp)
#animal_lev_p: animal level prevalence
#herd_not_free: (0/1) the herd is free or not
animal_p[i] <- animal_lev_p[i] * herd_not_free[i]
herd_not_free[i] ~ dbern(herd_p[region[i]])
animal_lev_p[i] ~ dbeta(alpha, beta)
#a: indices to calculate disease freedom or disease exceeding a prespecified level (here 5%) for the animals within each herd.
a[1, i] <- equals(animal_p[i], 0.00000E+00)
a[2, i] <- step(0.05-animal_p[i])
}
for (j in 1:regions) {
#herd_p: herd prevalence
#herd_lev_p: herd level prevalence
#region_not_free: (0/1) the region is free or not
herd_p[j] <- herd_lev_p[j] * region_not_free[j]
herd_lev_p[j] ~ dbeta(ahp, bhp)
#region_p: region prevalence
region_not_free[j] ~ dbern(region_p)
#b: indices to calculate disease freedom or disease exceeding a prespecified level (here 10%) for the herds within each region.
b[1, j] <- equals(herd_p[j], 0.00000E+00)
b[2, j] <- step(0.1 - herd_p[j])
}
region_p ~ dbeta(arp, brp)
#c: indices to calculate disease freedom or disease exceeding a prespecified level (here 20%) for the regions within the country.
c[1] <- equals(region_p, 0.00000E+00)
c[2] <- step(0.2 - region_p)
#priors
#mu: mean prevalence in infected herds
#psi: a parameter expressing the variability of prevalence among infected herds
mu ~ dbeta(amu, bmu)
psi ~ dgamma(apsi, bpsi)
alpha <- mu * psi
beta <- psi * (1 - mu)
Se ~ dbeta(ase1, bse1)
Sp ~ dbeta(asp1, bsp1)
}
}", file=paste("FullHierarchical.txt"))
generic_jags<-jagsoutput_TruezeroMult<-rjags::jags.model(data=list(n=Data$n,y=Data$y,
observations=Data$observations,
regions=Data$region,
amu=Data$amu, bmu=Data$bmu,
apsi=Data$apsi, bpsi=Data$bpsi,
ahp=Data$ahp,bhp=Data$bhp,
arp=Data$arp,brp=Data$brp,
ase1=Data$ase1,bse1=Data$bse1,
asp1=Data$asp1,bsp1=Data$bsp1),
inits=NULL, n.chains=2,
n.adapt = floor(100000/10),
file=paste("FullHierarchical.txt")) # ,quiet=TRUE
cat("model{
for (i in 1:observations) {
#app_p:apparent prevalence
y[i] ~ dbin(app_p[i], n[i])
#animal_p: animal prevalence
#Se:sensitivity
#Sp:specificity
app_p[i] <- animal_p[i] * Se + (1 - animal_p[i]) * (1 - Sp)
#animal_lev_p: animal level prevalence
#herd_not_free: (0/1) the herd is free or not
animal_p[i] <- animal_lev_p[i] * herd_not_free[i]
herd_not_free[i] ~ dbern(herd_p[region[i]])
animal_lev_p[i] ~ dbeta(alpha, beta)
#a: indices to calculate disease freedom or disease exceeding a prespecified level (here 5%) for the animals within each herd.
a[1, i] <- equals(animal_p[i], 0.00000E+00)
a[2, i] <- step(0.05-animal_p[i])
}
for (j in 1:regions) {
#herd_p: herd prevalence
#herd_lev_p: herd level prevalence
#region_not_free: (0/1) the region is free or not
herd_p[j] <- herd_lev_p[j] * region_not_free[j]
herd_lev_p[j] ~ dbeta(ahp, bhp)
#region_p: region prevalence
region_not_free[j] ~ dbern(region_p)
#b: indices to calculate disease freedom or disease exceeding a prespecified level (here 10%) for the herds within each region.
b[1, j] <- equals(herd_p[j], 0.00000E+00)
b[2, j] <- step(0.1 - herd_p[j])
}
region_p ~ dbeta(arp, brp)
#c: indices to calculate disease freedom or disease exceeding a prespecified level (here 20%) for the regions within the country.
c[1] <- equals(region_p, 0.00000E+00)
c[2] <- step(0.2 - region_p)
#priors
#mu: mean prevalence in infected herds
#psi: a parameter expressing the variability of prevalence among infected herds
mu ~ dbeta(amu, bmu)
psi ~ dgamma(apsi, bpsi)
alpha <- mu * psi
beta <- psi * (1 - mu)
Se ~ dbeta(ase1, bse1)
Sp ~ dbeta(asp1, bsp1)
}", file=paste("FullHierarchical.txt"))
Data<-list(
region=c
y=c(1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 3.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 2.00000E+00, 0.00000E+00, 2.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 2.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.30000E+01, 3.30000E+01, 4.50000E+01, 2.40000E+01, 2.80000E+01, 2.90000E+01, 3.30000E+01, 2.30000E+01, 1.40000E+01, 3.70000E+01, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 2.00000E+00, 0.00000E+00, 2.00000E+00, 2.00000E+00, 1.00000E+00, 2.00000E+00, 4.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 3.00000E+00, 0.00000E+00, 3.00000E+00, 0.00000E+00, 3.00000E+00, 3.00000E+00, 1.00000E+00, 1.00000E+00, 2.00000E+00, 0.00000E+00, 3.00000E+00, 1.00000E+00, 2.00000E+00, 1.00000E+00, 2.40000E+01, 3.40000E+01, 2.60000E+01, 2.00000E+00, 2.30000E+01, 2.40000E+01, 4.40000E+01, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 0.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.00000E+00, 1.70000E+01, 2.20000E+01, 1.30000E+01, 2.80000E+01, 1.80000E+01, 3.40000E+01, 2.20000E+01, 2.10000E+01, 4.40000E+01, 1.10000E+01, 2.30000E+01, 7.00000E+00, 9.00000E+00, 1.10000E+01, 1.20000E+01, 1.30000E+01, 1.40000E+01, 1.50000E+01, 1.60000E+01, 2.20000E+01, 2.00000E+00, 1.00000E+00, 2.00000E+00, 1.10000E+01, 2.10000E+01, 4.00000E+00, 2.30000E+01, 7.00000E+00, 2.80000E+01),
n=c(1.07000E+02, 9.20000E+01, 1.14000E+02, 1.21000E+02, 1.05000E+02, 9.20000E+01, 9.30000E+01, 8.00000E+01, 1.12000E+02, 9.40000E+01, 1.30000E+02, 1.45000E+02, 9.20000E+01, 1.09000E+02, 1.45000E+02, 1.01000E+02, 9.40000E+01, 1.32000E+02, 1.29000E+02, 1.46000E+02, 1.42000E+02, 1.02000E+02, 1.11000E+02, 1.07000E+02, 1.43000E+02, 9.00000E+01, 1.10000E+02, 8.60000E+01, 9.60000E+01, 1.09000E+02, 9.90000E+01, 1.13000E+02, 8.80000E+01, 9.00000E+01, 1.14000E+02, 8.30000E+01, 1.20000E+02, 1.33000E+02, 1.36000E+02, 1.27000E+02, 8.30000E+01, 8.70000E+01, 9.40000E+01, 9.70000E+01, 1.12000E+02, 1.14000E+02, 1.30000E+02, 1.31000E+02, 1.39000E+02, 1.46000E+02, 8.00000E+01, 1.10000E+02, 9.60000E+01, 1.35000E+02, 1.07000E+02, 9.80000E+01, 1.40000E+02, 1.06000E+02, 1.50000E+02, 8.10000E+01, 1.11000E+02, 1.02000E+02, 9.00000E+01, 8.60000E+01, 1.11000E+02, 1.05000E+02, 1.26000E+02, 1.40000E+02, 1.42000E+02, 1.35000E+02, 1.35000E+02, 1.36000E+02, 1.29000E+02, 1.43000E+02, 1.35000E+02, 1.26000E+02, 1.21000E+02, 1.01000E+02, 1.02000E+02, 1.27000E+02, 1.45000E+02, 1.27000E+02, 8.50000E+01, 9.50000E+01, 9.70000E+01, 9.90000E+01, 1.04000E+02, 1.05000E+02, 1.17000E+02, 1.33000E+02, 1.44000E+02, 1.37000E+02, 1.11000E+02, 1.35000E+02, 1.22000E+02, 1.25000E+02, 1.04000E+02, 1.38000E+02, 1.05000E+02, 1.48000E+02, 8.90000E+01, 8.80000E+01, 1.05000E+02, 1.10000E+02, 1.33000E+02, 1.34000E+02, 1.41000E+02, 1.41000E+02, 1.45000E+02, 9.10000E+01, 9.70000E+01, 1.08000E+02, 1.16000E+02, 1.31000E+02, 1.50000E+02, 1.45000E+02, 1.11000E+02, 1.15000E+02, 1.36000E+02, 1.41000E+02, 1.26000E+02, 1.31000E+02, 9.00000E+01, 1.01000E+02, 1.02000E+02, 1.03000E+02, 1.09000E+02, 1.34000E+02, 1.33000E+02),
observations=1.29000E+02, regions=1.00000E+01,
ase1=6.32000E+01, bse1=3.33000E+00, asp1=1.01430E+02, bsp1=1.12700E+01,
amu=2.02700E+01, bmu=8.10700E+01, apsi=8.97000E+00, bpsi=2.79000E+00,
ahp=2.40000E+00, bhp=9.61000E+00, arp=6.24000E+00, brp=1.45500E+01)
generic_jags<-jagsoutput_TruezeroMult<-rjags::jags.model(data=list(n=Data$n,y=Data$y,
observations=Data$observations,
regions=Data$region,
amu=Data$amu, bmu=Data$bmu,
apsi=Data$apsi, bpsi=Data$bpsi,
ahp=Data$ahp,bhp=Data$bhp,
arp=Data$arp,brp=Data$brp,
ase1=Data$ase1,bse1=Data$bse1,
asp1=Data$asp1,bsp1=Data$bsp1),
inits=NULL, n.chains=2,
n.adapt = floor(100000/10),
file=paste("FullHierarchical.txt")) # ,quiet=TRUE
shiny::runApp()
runApp()
data_out
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
runApp()
Model1.mcmc
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
runApp()
shiny::runApp()
runApp()
#   update(jagsoutput0, n.iter=nniter, n.thin=nnthin, n.burnin=floor(nniter/6), progress.bar="none")
Model1.mcmc <<- coda.samples(jagsoutput_TruezeroMult,
n.iter=input$nniter,thin = input$nnthin,
variable.names=SaveParams,seed=998)
runApp()
runApp()
load("~/GitHub/tPriors/.RData")
as.mcmc(Model1.mcmc)
traceplot(Model1.mcmc)
autocorr.plot(Model1.mcmc)
S2<-ggs(Model1.mcmc,family = "main")
ggs_histogram(S2,family = "main")
ggs_density(S2,family = "main")
ggs_traceplot(S2,family = "main")
ggs_running(S2,family = "main")
ggs_compare_partial(S2,family = "main")
ggs_autocorrelation(S2,family = "main")
S2<-ggs(Model1.mcmc,family = "main")
ggs_histogram(S2,family = "main")
Model1.mcmc
S2<-ggs(Model1.mcmc)
ggs_histogram(S2,family = "main")
S2<-ggs(Model1.mcmc,family = "main")
ggs_histogram(S2)
## Predictions
S<-ggs(Model1.mcmc)
ggs_density(S,family = "pre")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
temprbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n
temp=rbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n
temp=rbinom(n = 10000, size =  100, prob = 20/100)/100
temp
plot(density(temp))
?geom_density
runApp()
Model1.mcmc[[1]]
Model1.mcmc[[2]]
runApp()
?ggs_traceplot
names(S)
head(S)
S$Parameter
levels(S$Parameter)
levels(S$Parameter)=="main.ap"
levels(S$Parameter)[levels(S$Parameter)=="main.ap"]
runApp()
runApp()
S <- ggmcmc::ggs(Model1.mcmc)
levels(S$Parameter)[levels(S$Parameter)=="main.ap"]<-"Apparent prevalence"
levels(S)
levels(S$Parameter)
p2<-ggs_traceplot(S,family = "main")
p2
p2<-ggs_traceplot(S,family = "prevalence")
p2
runApp()
runApp()
runApp()
temp=Model1.mcmc[[1]]
temp
names(Model1.mcmc)
names(temp)
temp=Model1.mcmc[[1]][[1]]
temp
temp=Model1.mcmc[[1]]
temp
head(temp_)
head(temp)
temp[1]
data.frame(temp)
temp=data.frame(temp)
temp=data.frame(Model1.mcmc[[1]])
temp$pre.pequal0
mean(temp$pre.pequal0)
temp$pre.pstar.rep
plot(density(temp$pre.pstar.rep))
mean(R.Temp3$pre.pstar.rep)
mean(temp$pre.pstar.rep)
runApp()
temp$pre.pstar.rep
plot(temp$pre.pstar.rep)
runApp()
S
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(density(temp$sub.p.1.))
Data1
runApp()
runApp()
runApp()
data_out_sub_wide
levels(data_out_sub_wide$group)
data_out_sub_wide$group
levels(dtst$region)
dtst
dtst$region
runApp()
runApp()
runApp()
runApp()
Model1.mcmc
Model1.mcmc
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
summary(data_out$sub.p.40.)
Data2
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
Model1.mcmc
Model1.mcmc[[1]][,1])[,1]
Model1.mcmc[[1]][,1])
Model1.mcmc[[1]][,1]
temp=Model1.mcmc[[1]]
temp=data.frame(Model1.mcmc[[1]])
temp$main.ap
data.frame(Model1.mcmc[[1]][,1])[,1])
data.frame(Model1.mcmc[[1]][,1])[,1]
data.frame(Model1.mcmc[[1]][,1])
temp=data.frame(Model1.mcmc[[1]][,1])
temp$var1
runApp()
namas(Model1.mcmc_df)
names(Model1.mcmc_df)
names(Model1.mcmc)
#Simple plot
#plot(density(Model1.mcmc[[1]][,1]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
#lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
#ggplot
Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
names(Model1.mcmc_df)
runApp()
cat("model{
for(i in 1:k){
y[i] ~ dbin(ap[i], n[i])
ap[i] <- sub.p[i]*main.Se + (1-sub.p[i])*(1-main.Sp)
#informative hyperpior for prevalence
sub.p[i] ~ dbeta(alpha,beta) T(0.001,0.999)
}
alpha <- main.ap*main.psi
beta <- main.psi*(1-main.ap)
main.ap ~ dbeta(amu, bmu) T(0.001,0.999)
main.psi ~ dgamma(apsi, bpsi) T(0.001,0.999)
#informative prior for Se and Sp
main.Se ~ dbeta(ase, bse) T(0.001,0.999)
main.Sp ~ dbeta(asp, bsp) T(0.001,0.999)
#predictions
y.pre ~ dbin(main.ap,m)
pre.pstar.rep ~ dbeta(alpha,beta)
pre.pequal0 <- equals(pre.pstar.rep,0)
pre.plessthan0.05 <- step(0.05-pre.pstar.rep)
plessthanSetvalue <- step(perVal-main.ap)
}", file=paste("TrePreMultiple.txt"))
SaveParams <- c("main.ap","psi","main.Sp","main.Se","y.pre",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05","sub.p","plessthanSetvalue")
dtst<-dataset()
dtst$region<-factor(dtst$region)
dtst$country<-factor(dtst$country)
dtst$ID<-1:length(dtst$region)
dtst=Data2
dtst$region<-factor(dtst$region)
dtst$country<-factor(dtst$country)
dtst$ID<-1:length(dtst$region)
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=2, bse=12,
asp=2, bsp=12,
amu=2, bmu=12,
apsi=2, bpsi=12,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(10000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=input$nniter,thin =input$nnthin,
variable.names=SaveParams,seed=998)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
SaveParams <- c("main.ap","main.psi","main.Sp","main.Se","y.pre",
"pre.pstar.rep","pre.pequal0","pre.plessthan0.05","sub.p","plessthanSetvalue")
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=2, bse=12,
asp=2, bsp=12,
amu=2, bmu=12,
apsi=2, bpsi=12,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=3000,thin =4,
variable.names=SaveParams,seed=998)
renderPlotly({
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
})
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=2, bse=1,
asp=2, bsp=1,
amu=2, bmu=1,
apsi=2, bpsi=1,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=3000,thin =4,
variable.names=SaveParams,seed=998)
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=21, bse=1,
asp=21, bsp=1,
amu=21, bmu=1,
apsi=21, bpsi=1,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=3000,thin =4,
variable.names=SaveParams,seed=998)
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
runApp()
Data1
dtst=Data2
dtst=Data1
generic_jags<-jagsoutput_TrueMult<-rjags::jags.model(data=list(n=dtst$n,y=dtst$positive, k=length(dtst$n),m=100,
ase=21, bse=1,
asp=21, bsp=1,
amu=21, bmu=1,
apsi=21, bpsi=1,
perVal=0.5),
inits=NULL, n.chains=2,n.adapt = floor(3000/10),
file=paste("TrePreMultiple.txt"),quiet=TRUE)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=input$nniter,thin =input$nnthin,
variable.names=SaveParams,seed=998)
Model1.mcmc <<- coda.samples(jagsoutput_TrueMult,
n.iter=10000,thin =4,
variable.names=SaveParams,seed=998)
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)
levels(data_out_sub_wide$group)<-1:length(levels(data_out_sub_wide$group))
p2 <- data_out_sub_wide %>%
ggplot( aes(x=group, y=prevalence, fill=group)) +
geom_boxplot() +
#  geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
#p2
ggplotly(p2)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
