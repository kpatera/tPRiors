---
title: "tPriors-dynamic-report"
author: ""
date: "`r format(Sys.time(), '%d %B, %Y')`"
keep_md: yes
output: html_document
runtime: shiny
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
#

## General information

This report has automatically been generated by the shiny web-application tPriors as an R Markdown document based on your data input and prior selection. The web-application can be found at <https://kpateras.shinyapps.io/tPriors>. We advice users that after observing the results of this report to avoid re-updating their prior beliefs to avoid hampering the credibility of these results.

------------------------------------------------------------------------

The following section describes your input. During set-up the user assumed that:

1.  `r input$ID_SingleMultiple` modelled,
2.  `r input$ID_ZeroPrevalence`, zero prevalence was modeled  and `r if(input$ID_ZeroPrevalence=="Yes"){paste0("Pr(True prevalence >0)=",input$tau0)}`.
3.  between the Apparent and True prevalence the `r input$ID_TrueApp` was modelled and
4.  (the) `r input$ID_MeanMedianMode` was used to elicitate prior knowledge.

------------------------------------------------------------------------

If the true prevalence (inline equation test: $\pi_{t}$) is modelled the following relation is utilized to acquire its posterior distribution, inline equation test: $\pi_{a} = \pi_{t}\cdot S_{e}(1-\pi_{t})\cdot (1-S_{p})$, where inline equation test: $S_{p},S_{e}$ denotes the specificity and sensitivity of the diagnostic test and inline equation test: $\pi_{a}$ the apparent prevalence.

------------------------------------------------------------------------

------------------------------------------------------------------------

## The elicited prior

The selected prior distribution of the `r input$ID_TrueApp` has the following descriptive characteristics and density plot.

```{r echo=FALSE}
paste0("Summary of ",input$ID_TrueApp," Beta(",fb$abeta,",", fb$bbeta,") prior")
sample_beta<-rbeta(n = 10000,fb$a, fb$b)
summary(sample_beta)
```

```{r echo = FALSE}
renderPlotly({
x<-seq(0,1,length.out = 2000)
    #plot(x,dbeta(x = x,dbeta(x = x,shape1 = fb$a,shape2 = fb$b),shape1 = fb$a,shape2 = fb$b),type = "l",lwd=3,ylab = "Density Beta")
    Prevalence<-dbeta(x = x,shape1 = fb$abeta,shape2 = fb$bbeta)
    df <- data.frame(x, Prevalence)
    df <- gather(df, func, val, -x)
    gg <- ggplot(df, aes(x=x, y=val, group=func))
    gg <- gg + geom_line(aes(color=func),size=1.3) 
    gg <- gg + scale_y_continuous(expand=c(0, 0))
    gg <- gg + scale_color_manual(name="Prior(s)", 
                                  values=c("#b2182b"),
                                  labels=c("Prevalence"))
    gg <- gg + labs(x="Density", y="Probability distribution functions")
    gg <- gg + theme_bw()
    gg <- gg + theme(panel.border=element_blank())
    gg <- gg + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ggplotly(gg)
  })
```
<br>
<br>
------------------------------------------------------------------------

------------------------------------------------------------------------

## The data

A summary of the input data is provided below

```{r echo=FALSE}
#"Position of Data Table"
#dataTableOutput("table2")
paste0("The assumed probability for non-zero prevalence was set equal to ", input$tau0)

paste0("The probability that the posterior prevalence is higher than ", input$perVal," equals to")
Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
sum(Model1.mcmc_df$main.ap>input$perVal)/length(Model1.mcmc_df$main.ap)
```

------------------------------------------------------------------------

------------------------------------------------------------------------

## The model

```{r echo=FALSE}
renderPlotly({
    priors$prior<<-list(a=fb$a,b=fb$b)
    post <-  data.frame(density=data.frame(density=Model1.mcmc[[1]][,1])[,1])
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
    #Lik <- data.frame(density=rbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n)
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior' #; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri)#, Lik)
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2)+
      xlim(0, 1)+ theme(legend.position="top")
    ggplotly(p1)
  })
```

# Study-level boxplot or posterior prevalences
```{r echo=FALSE}
renderPlotly({
data_out<-(data.frame(Model1.mcmc[[1]]))
data_out_sub<-data_out[,grepl( "sub" , names( data_out ) )]
data_out_sub_wide<-gather(data_out_sub, group, prevalence, names( data_out_sub ), factor_key=TRUE)

p2 <- data_out_sub_wide %>%
  ggplot( aes(x=group, y=prevalence, fill=group)) +
  geom_boxplot() +
#  geom_violin() +
  xlab("class") +
  theme(legend.position="none") +
  xlab("")
  p2
  ggplotly(p2)
})

```

------------------------------------------------------------------------

------------------------------------------------------------------------

## Prediagnostics
```{r echo=FALSE}

renderPlotly({
P <- data.frame(
  Parameter=c("main.mu", "main.Se", "main.Sp", "main.tau0"),
  Label=c("Prevalence", "Sensitivity", "Specificity","Pr=0 Herd Prevalence"))
p3<-ggs_density(ggs(S = Model1.mcmc, par_labels=P, family="main"))
ggplotly(p3)
  })

```

## Diagnostics 

```{r echo=FALSE, figures-side, fig.show="hold", out.width="50%"}
    oldw <- getOption("warn") # silence warnings for diagnostic plots
    options(warn = -1)
    S<-ggs(Model1.mcmc,family = "main")
    ggs_histogram(S,family = "main")
    ggs_density(S,family = "main")
    ggs_traceplot(S,family = "main")
    ggs_running(S,family = "main")
    ggs_compare_partial(S,family = "main")
    ggs_autocorrelation(S,family = "main")
    options(warn = oldw) # turn back warnings to previous level
# Model1fit<-as.mcmc(Model1.mcmc)
# traceplot(Model1.mcmc)
# autocorr.plot(Model1fit)
# geweke.plot(Model1fit)
```

------------------------------------------------------------------------

## Diagnostics - stydy level

```{r echo=FALSE, figures-side2, fig.show="hold", out.width="50%"}
    oldw2 <- getOption("warn") # silence warnings for diagnostic plots
    options(warn = -1)
    S2<-ggs(Model1.mcmc,family = "sub")
   # ggs_histogram(S2,family = "sub")
  #  ggs_density(S2,family = "sub")
    ggs_traceplot(S2,family = "sub")
    #ggs_running(S2,family = "sub")
  #  ggs_compare_partial(S2,family = "sub")
   # ggs_autocorrelation(S2,family = "sub")
    options(warn = oldw2) # turn back warnings to previous level
# Model1fit<-as.mcmc(Model1.mcmc)
# traceplot(Model1.mcmc)
# autocorr.plot(Model1fit)
# geweke.plot(Model1fit)
```
    ------------------------------------------------------------------------


End of tPriors report.
