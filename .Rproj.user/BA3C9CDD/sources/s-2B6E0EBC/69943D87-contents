shinyServer(function(input, output, session) {
  ########### Set up initial values ################################################ #
  options(shiny.reactlog=TRUE) #THen press ctrl+f3
  priors <<- reactiveValues()
  cond<-reactiveValues()
  input<<-reactiveValues()
  priors$prior <<- reactiveValues()
  prior_cond<-reactiveValues()
  priors$temp<-"Status: 'Not set'"
  priors$temp2<-"Please first select options and press -Fix-"
  priors$icons<-"thumbs-down"
  priors$color<-"red"
  priors$SetupPriors<-FALSE
  priors$PriorSelect<-FALSE
  priors$mSetupmodel<-FALSE
  priors$mSetupPriors<-FALSE
  #Model1.mcmc <- reactiveValues()
  #input$ID_TrueApp<-FALSE
  
  # prior_cond<<-" not "
  
  # priors$prior1<<-reactiveValues()
  # priors$prior2<<-reactiveValues()
  
  ########### POP UP MESSAGE in the beginning ################################################ #
  
  # showModal(modalDialog(
  #   title = "Important message",
  #   easyClose = FALSE,
  #   p("This tool aims at estimating the true prevalence based on the apparent prevalence of infection obtained from your sampling and adjusting for the diagnostic accuracy of the tests used.",
  #     tags$strong("
  #   Following Data Protection legislations, we would like to inform you before you use our web application that :"), "We collect data regardingn your app usage within the IWA app to conduct analysis of usage and develope the application further. By clicking",
  #     tags$i(tags$u("I consent")), "you consent to us utilizing the data via Google Analytics.
  #         We refer interested users to our policy by clicking the 'Privacy notice' tab from within the app, and also ",tags$a(href="https://policies.google.com/privacy?hl=en", "Google Privacy & Terms.",target="_blank") ),
  #   br(),
  #   modalButton("I consent"),
  #   footer = NULL
  # ))
  
  
  
  
  ######### PriorGen 3 routines ############################################################### #
  
  output$PriorGenPlot1 <- plotly::renderPlotly({
    #source("Functions/multiroot.R",local = TRUE)
    if(input$ID_MeanMedianMode=="Mean" & !is.null(input[["PriorMetric"]])){
      fb<<-findbeta2(themean =input$PriorMetric, percentile=input$Percentile1,lower.v=input$lower.value, percentile.value=input$PercentileValue1)
    }else if(input$ID_MeanMedianMode=="Median"){
      fb<<-findbeta2(themedian=input$PriorMetric, percentile=input$Percentile1,lower.v=input$lower.value, percentile.value=input$PercentileValue1)
    }else if(input$ID_MeanMedianMode=="Mode"){
      fb<<-findbeta2(themode =input$PriorMetric, percentile=input$Percentile1,lower.v=input$lower.value, percentile.value=input$PercentileValue1)
    }
    # find beta based on prior knowledge
    
    x<-seq(0,1,length.out = 2000)
    #plot(x,dbeta(x = x,dbeta(x = x,shape1 = fb$a,shape2 = fb$b),shape1 = fb$a,shape2 = fb$b),type = "l",lwd=3,ylab = "Density Beta")
    priors$prior<<-list(a=fb$a,b=fb$b)
    Prevalence<-dbeta(x = x,shape1 = priors$prior$a,shape2 = priors$prior$b)
    df <- data.frame(x, Prevalence)
    df <- gather(df, func, val, -x)
    gg <- ggplot(df, aes(x=x, y=val, group=func))
    gg <- gg + geom_line(aes(color=func),size=1.3) 
    gg <- gg + scale_y_continuous(expand=c(0, 0))
    gg <- gg + scale_color_manual(name="Prior(s)", 
                                  values=c("#b2182b"),
                                  labels=c("Prevalence"))
    gg <- gg + labs(x="Density", y="Probability distribution functions")
    gg <- gg + theme_bw()
    gg <- gg + theme(panel.border=element_blank())
    gg <- gg + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ggplotly(gg)
    #fig <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb$a,shape2 = fb$b), type = 'scatter', mode = 'lines', fill = 'tozeroy',
    #               width=400, height=400)
    #fig <- fig %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density'))
    #fig
  })
  
  output$PriorGenPlot1_true <- plotly::renderPlotly({
    #source("Functions/multiroot.R",local = TRUE)
    if(input$ID_MeanMedianMode=="Mean"){
      fb<<-findbeta2(themean =input$PriorMetric, percentile=input$Percentile1,lower.v=input$lower.value, percentile.value=input$PercentileValue1)
      fb_SE<<-findbeta2(themean =input$PriorMetric_SE, percentile=input$Percentile1_SE,lower.v=input$lower.value_SE, percentile.value=input$PercentileValue1_SE)
      fb_SP<<-findbeta2(themean =input$PriorMetric_SP, percentile=input$Percentile1_SP,lower.v=input$lower.value_SP, percentile.value=input$PercentileValue1_SP)
    }else if(input$ID_MeanMedianMode=="Median"){
      fb<<-findbeta2(themedian=input$PriorMetric, percentile=input$Percentile1,lower.v=input$lower.value, percentile.value=input$PercentileValue1)
      fb_SE<<-findbeta2(themedian =input$PriorMetric_SE, percentile=input$Percentile1_SE,lower.v=input$lower.value_SE, percentile.value=input$PercentileValue1_SE)
      fb_SP<<-findbeta2(themedian =input$PriorMetric_SP, percentile=input$Percentile1_SP,lower.v=input$lower.value_SP, percentile.value=input$PercentileValue1_SP)
    }else if(input$ID_MeanMedianMode=="Mode"){
      fb<<-findbeta2(themode =input$PriorMetric, percentile=input$Percentile1,lower.v=input$lower.value, percentile.value=input$PercentileValue1)
      fb_SE<<-findbeta2(themode =input$PriorMetric_SE, percentile=input$Percentile1_SE,lower.v=input$lower.value_SE, percentile.value=input$PercentileValue1_SE)
      fb_SP<<-findbeta2(themode =input$PriorMetric_SP, percentile=input$Percentile1_SP,lower.v=input$lower.value_SP, percentile.value=input$PercentileValue1_SP)
    }
    priors$prior<<-list(a=fb$a,b=fb$b,ase=fb_SE$a,bse=fb_SE$b,asp=fb_SP$a,bsp=fb_SP$b)
    # find beta based on prior knowledge
    x<-seq(0,1,length.out = 2000)
    Prevalence<-dbeta(x = x,shape1 = fb$a,shape2 = fb$b)
    Sensitivity<-dbeta(x = x,shape1 = fb_SE$a,shape2 = fb_SE$b)
    Specificity<-dbeta(x = x,shape1 = fb_SP$a,shape2 = fb_SP$b)
    df1 <- data.frame(x, Prevalence)
    df2 <- data.frame(x, Sensitivity, Specificity)
    df1 <- gather(df1, func, val, -x)
    df2 <- gather(df2, func, val, -x)
    
    gg1 <- ggplot(df1, aes(x=x, y=val, group=func))
    gg1 <- gg1 + geom_line(aes(color=func),size=1.3) 
    gg1 <- gg1 + scale_y_continuous(expand=c(0, 0))
    gg1 <- gg1 + scale_color_manual(name="Prior(s)", 
                                    values=c("#b2182b"),
                                    labels=c("Prevalence"))
    gg1 <- gg1 + labs(x="Density", y="Probability distribution functions")
    gg1 <- gg1 + theme_bw()
    gg1 <- gg1 + theme(panel.border=element_blank())
    gg1 <- gg1 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    
    gg2 <- ggplot(df2, aes(x=x, y=val, group=func))
    gg2 <- gg2 + geom_line(aes(color=func),size=1.3) 
    gg2 <- gg2 + scale_y_continuous(expand=c(0, 0))
    gg2 <- gg2 + scale_color_manual(name="", 
                                    values=c("#4393c3","#B79F00"),
                                    labels=c("Sensitivity","Specificity"))
    gg2 <- gg2 + labs(x="Density", y="Probability distribution functions")
    gg2 <- gg2 + theme_bw()
    gg2 <- gg2 + theme(panel.border=element_blank())
    gg2 <- gg2 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ply1 <- ggplotly(gg1)
    ply2 <- ggplotly(gg2)
    subplot(ply1, ply2, nrows=1,titleX = TRUE)
    
    #plot(x,dbeta(x = x,dbeta(x = x,shape1 = fb$a,shape2 = fb$b),shape1 = fb$a,shape2 = fb$b),type = "l",lwd=3,ylab = "Density Beta")
    # fig <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb$a,shape2 = fb$b), type = 'scatter', mode = 'lines', fill = 'tozeroy',
    #                width=400, height=400)
    # fig <- fig %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density Prevalence'))
    # fig
    # 
    # 
    # fig_SE <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb_SE$a, shape2 = fb_SE$b), type = 'scatter', mode = 'lines', fill = 'tozeroy',
    #                  width=400, height=400)
    # fig_SE <- fig_SE %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density (Sensitivity)'))
    # fig_SE 
    # 
    # fig_SP <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb_SP$a, shape2 = fb_SP$b), type = 'scatter', mode = 'lines', fill = 'tozeroy',
    #                   width=400, height=400)
    # fig_SP <- fig_SP %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density (Specificity)'))
    # fig_SP 
    # 
    # fig_total<-subplot(fig,fig_SE,fig_SP, shareX = TRUE, shareY = TRUE)
    # fig_total
  })
  
  output$PriorGenPlot2 <- plotly::renderPlotly({
  #  require(rootSolve);require(PriorGen) 
  # source("Functions/multiroot.R",local = TRUE)
   #source("Functions/findbetamupsi2.R",local = TRUE)
    fb<<-findbetamupsi2(themean=input$PriorMean2, percentile=input$Percentile2,
                        lower.v=input$lower.value2,percentile.value=input$PercentileValue2,
                        psi.percentile=input$PercentilePsi2, percentile.median=input$PercentileMedian2,
                        percentile95value=input$Percentile95value2)
    # fb<-NULL
    fb$aa<<-fb$atotalbeta; fb$bb<<-fb$btotalbeta
    fb$a<<-fb$abeta; fb$b<<-fb$bbeta
    fb$ag<<-fb$agamma; fb$bg<<-fb$bgamma
    priors$prior<<-list(a=fb$abeta,b=fb$bbeta)
    
    x<-seq(0,1,length.out = 2000)
    #plot(x,dbeta(x = x,dbeta(x = x,shape1 = fb$a,shape2 = fb$b),shape1 = fb$a,shape2 = fb$b),type = "l",lwd=3,ylab = "Density Beta")
   # priors$prior<<-list(a=fb$a,b=fb$b)
    mu.Prevalence<-dbeta(x = x,shape1 = fb$abeta,shape2 = fb$bbeta)
    psi.Prevalence<-dbeta(x = x,shape1 = fb$agamma,shape2 = fb$bgamma)
    df1 <- data.frame(x, mu.Prevalence)
    df2 <- data.frame(x, psi.Prevalence)
    df1 <- gather(df1, func, val, -x)
    df2 <- gather(df2, func, val, -x)
    
    gg1 <- ggplot(df1, aes(x=x, y=val, group=func))
    gg1 <- gg1 + geom_line(aes(color=func),size=1.3) 
    gg1 <- gg1 + scale_y_continuous(expand=c(0, 0))
    gg1 <- gg1 + scale_color_manual(name="Prior(s)", 
                                    values=c("#12182b"),
                                    labels=c("mu.Prevalence"))
    gg1 <- gg1 + labs(x="Density", y="Probability distribution functions")
    gg1 <- gg1 + theme_bw()
    gg1 <- gg1 + theme(panel.border=element_blank())
    gg1 <- gg1 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    gg1
    gg2 <- ggplot(df2, aes(x=x, y=val, group=func))
    gg2 <- gg2 + geom_line(aes(color=func),size=1.3)
    gg2 <- gg2 + scale_y_continuous(expand=c(0, 0))
    gg2 <- gg2 + scale_color_manual(name="",
                                    values=c("#E2182b"),
                                    labels=c("psi.Prevalence"))
    gg2 <- gg2 + labs(x="Density", y="Probability distribution functions")
    gg2 <- gg2 + theme_bw()
    gg2 <- gg2 + theme(panel.border=element_blank())
    gg2 <- gg2 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ply1 <- ggplotly(gg1)
    ply2 <- ggplotly(gg2)
    subplot(ply1, ply2, nrows=1,titleX = TRUE)
    
    
    #fig1 <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb$atotalbeta, shape2 = fb$btotalbeta), type = 'scatter', mode = 'lines', fill = 'tozeroy', width=400, height=400)
    #fig1 <- fig1 %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density'))
    #fig1
    #fig2 <- plot_ly(x = ~x, y = ~dgamma(x = x,shape1 = fb$agamma,shape2 = fb$bgamma), type = 'scatter', mode = 'lines', fill = 'tozeroy', width=400, height=400)
    #fig2 <- fig2 %>% layout(xaxis = list(title = 'Gamma'), yaxis = list(title = 'Density'))
    
    #subplot(fig1, fig2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
  })
  
  output$PriorGenPlot2_true <- plotly::renderPlotly({
    #source("Functions/multiroot.R",local = TRUE)
   source("Functions/findbetamupsi2.R")
  # source("Functions/findbetamupsi3.R")
  # source("Functions/findbetamupsi4.R")
   
    fb<<-findbetamupsi2(themean=input$PriorMean2, percentile=input$Percentile2,
                        lower.v=input$lower.value2,percentile.value=input$PercentileValue2,
                        psi.percentile=input$PercentilePsi2, percentile.median=input$PercentileMedian2,
                        percentile95value=input$Percentile95value2)
    # fb<-NULL
    fb$aa<-fb$atotalbeta; fb$bb<-fb$btotalbeta
    fb$a<<-fb$abeta; fb$b<<-fb$bbeta
    fb$ag<<-fb$agamma; fb$bg<<-fb$bgamma
    
    fb_SE<<-findbetamupsi2(themean=input$PriorMean2_SE, percentile=input$Percentile2_SE,
                           lower.v=input$lower.value2_SE,percentile.value=input$PercentileValue2_SE,
                           psi.percentile=input$PercentilePsi2_SE, percentile.median=input$PercentileMedian2_SE,
                           percentile95value=input$Percentile95value2_SE)
    # fb_SE<-NULL
    fb_SE$a<<-fb_SE$abeta; fb_SE$b<<-fb_SE$bbeta

    fb_SP<<-findbetamupsi2(themean=input$PriorMean2_SP, percentile=input$Percentile2_SP,
                           lower.v=input$lower.value2_SP,percentile.value=input$PercentileValue2_SP,
                           psi.percentile=input$PercentilePsi2_SP, percentile.median=input$PercentileMedian2_SP,
                           percentile95value=input$Percentile95value2_SP)
    #fb_SP<-NULL
    fb_SP$aa<<-fb_SP$abeta; fb_SP$bb<<-fb_SP$bbeta

    priors$prior<<-list(aa=fb$atotalbeta,bb=fb$btotalbeta,
                        a=fb$abeta,b=fb$bbeta,
                        ag=fb$agamma,bg=fb$bgamma)
    
    x<-seq(0,1,length.out = 2000)
    mu.Prevalence<-dbeta(x = x,shape1 = fb$abeta,shape2 = fb$bbeta)
    psi.Prevalence<-dbeta(x = x,shape1 = fb$agamma,shape2 = fb$bgamma)
    Sensitivity<-dbeta(x = x,shape1 = fb_SE$abeta,shape2 = fb_SE$bbeta)
    Specificity<-dbeta(x = x,shape1 = fb_SP$abeta,shape2 = fb_SP$bbeta)
    df1 <- data.frame(x, mu.Prevalence,psi.Prevalence)
    df2 <- data.frame(x, Sensitivity,Specificity)
    df1 <- gather(df1, func, val, -x)
    df2 <- gather(df2, func, val, -x)
    
    gg1 <- ggplot(df1, aes(x=x, y=val, group=func))
    gg1 <- gg1 + geom_line(aes(color=func),size=1.3) 
    gg1 <- gg1 + scale_y_continuous(expand=c(0, 0))
    gg1 <- gg1 + scale_color_manual(name="Prior(s)", 
                                    values=c("#b2182b","#12182b"),
                                    labels=c("mu.Prevalence","psi.Prevalence"))
    gg1 <- gg1 + labs(x="Density", y="Probability distribution functions")
    gg1 <- gg1 + theme_bw()
    gg1 <- gg1 + theme(panel.border=element_blank())
    gg1 <- gg1 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    gg1
    gg2 <- ggplot(df2, aes(x=x, y=val, group=func))
    gg2 <- gg2 + geom_line(aes(color=func),size=1.3)
    gg2 <- gg2 + scale_y_continuous(expand=c(0, 0))
    gg2 <- gg2 + scale_color_manual(name="",
                                    values=c("#4393c3","#B79F00"),
                                    labels=c("Sensitivity","Specificity"))
    gg2 <- gg2 + labs(x="Density", y="Probability distribution functions")
    gg2 <- gg2 + theme_bw()
    gg2 <- gg2 + theme(panel.border=element_blank())
    gg2 <- gg2 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ply1 <- ggplotly(gg1)
    ply2 <- ggplotly(gg2)
    subplot(ply1, ply2, nrows=1,titleX = TRUE)
    
    
    #fig1 <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb$atotalbeta, shape2 = fb$btotalbeta), type = 'scatter', mode = 'lines', fill = 'tozeroy', width=400, height=400)
    #fig1 <- fig1 %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density'))
    #fig1
    #fig2 <- plot_ly(x = ~x, y = ~dgamma(x = x,shape1 = fb$agamma,shape2 = fb$bgamma), type = 'scatter', mode = 'lines', fill = 'tozeroy', width=400, height=400)
    #fig2 <- fig2 %>% layout(xaxis = list(title = 'Gamma'), yaxis = list(title = 'Density'))
    
    #subplot(fig1, fig2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
  })
  
  output$PriorGenPlot2_true_zero <- plotly::renderPlotly({
    #source("Functions/multiroot.R",local = TRUE)
    source("Functions/findbetamupsi2.R")
    #source("Functions/findbetamupsi3.R")
   # source("Functions/findbetamupsi4.R")
    
    fb<<-findbetamupsi2(themean=input$PriorMean2, percentile=input$Percentile2,
                        lower.v=input$lower.value2,percentile.value=input$PercentileValue2,
                        psi.percentile=input$PercentilePsi2, percentile.median=input$PercentileMedian2,
                        percentile95value=input$Percentile95value2)
    # fb<-NULL
    fb$aa<<-fb$atotalbeta; fb$bb<<-fb$btotalbeta
    fb$a<<-fb$abeta; fb$b<<-fb$bbeta
    fb$ag<<-fb$agamma; fb$bg<<-fb$bgamma
    
    fb_SE<<-findbetamupsi2(themean=input$PriorMean2_SE, percentile=input$Percentile2_SE,
                           lower.v=input$lower.value2_SE,percentile.value=input$PercentileValue2_SE,
                           psi.percentile=input$PercentilePsi2_SE, percentile.median=input$PercentileMedian2_SE,
                           percentile95value=input$Percentile95value2_SE)
    # fb_SE<-NULL
    fb_SE$a<<-fb_SE$abeta; fb_SE$b<<-fb_SE$bbeta
    
    fb_SP<<-findbetamupsi2(themean=input$PriorMean2_SP, percentile=input$Percentile2_SP,
                           lower.v=input$lower.value2_SP,percentile.value=input$PercentileValue2_SP,
                           psi.percentile=input$PercentilePsi2_SP, percentile.median=input$PercentileMedian2_SP,
                           percentile95value=input$Percentile95value2_SP)
    # fb_SP<-NULL
    fb_SP$a<<-fb_SP$abeta; fb_SP$b<<-fb_SP$bbeta
    
    
    fb_tau0<<-findbetamupsi2(themean=input$PriorMean2_tau0, percentile=input$Percentile2_tau0,
                           lower.v=input$lower.value2_tau0,percentile.value=input$PercentileValue2_tau0,
                           psi.percentile=input$PercentilePsi2_tau0, percentile.median=input$PercentileMedian2_tau0,
                           percentile95value=input$Percentile95value2_tau0)
    # fb_tau0<-NULL
    fb_tau0$a<<-fb_tau0$abeta; fb_tau0$b<<-fb_tau0$bbeta
    
    
    
    priors$prior<<-list(aa=fb$atotalbeta,bb=fb$btotalbeta,
                        a=fb$abeta,b=fb$bbeta,
                        ag=fb$agamma,bg=fb$bgamma)
    
    x<-seq(0,1,length.out = 2000)
    mu.Prevalence<-dbeta(x = x,shape1 = fb$abeta,shape2 = fb$bbeta)
    psi.Prevalence<-dbeta(x = x,shape1 = fb$agamma,shape2 = fb$bgamma)
    Prob.Zero.Prev<-dbeta(x = x,shape1 = fb_tau0$a,shape2 = fb_tau0$b)
    
    Sensitivity<-dbeta(x = x,shape1 = fb_SE$abeta,shape2 = fb_SE$bbeta)
    Specificity<-dbeta(x = x,shape1 = fb_SP$abeta,shape2 = fb_SP$bbeta)
    df1 <- data.frame(x, mu.Prevalence,psi.Prevalence,Prob.Zero.Prev)
    df2 <- data.frame(x, Sensitivity,Specificity)
    df1 <- gather(df1, func, val, -x)
    df2 <- gather(df2, func, val, -x)
    
    gg1 <- ggplot(df1, aes(x=x, y=val, group=func))
    gg1 <- gg1 + geom_line(aes(color=func),size=1.3) 
    gg1 <- gg1 + scale_y_continuous(expand=c(0, 0))
    gg1 <- gg1 + scale_color_manual(name="Prior(s)", 
                                    values=c("#b2182b","#12182b","#34182c"),
                                    labels=c("mu.Prevalence","psi.Prevalence","Prob.Zero.Prev"))
    gg1 <- gg1 + labs(x="Density", y="Probability distribution functions")
    gg1 <- gg1 + theme_bw()
    gg1 <- gg1 + theme(panel.border=element_blank())
    gg1 <- gg1 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    gg1
    gg2 <- ggplot(df2, aes(x=x, y=val, group=func))
    gg2 <- gg2 + geom_line(aes(color=func),size=1.3)
    gg2 <- gg2 + scale_y_continuous(expand=c(0, 0))
    gg2 <- gg2 + scale_color_manual(name="",
                                    values=c("#4393c3","#B79F00"),
                                    labels=c("Sensitivity","Specificity"))
    gg2 <- gg2 + labs(x="Density", y="Probability distribution functions")
    gg2 <- gg2 + theme_bw()
    gg2 <- gg2 + theme(panel.border=element_blank())
    gg2 <- gg2 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ply1 <- ggplotly(gg1)
    ply2 <- ggplotly(gg2)
    subplot(ply1, ply2, nrows=1,titleX = TRUE)
    
    
    #fig1 <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb$atotalbeta, shape2 = fb$btotalbeta), type = 'scatter', mode = 'lines', fill = 'tozeroy', width=400, height=400)
    #fig1 <- fig1 %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density'))
    #fig1
    #fig2 <- plot_ly(x = ~x, y = ~dgamma(x = x,shape1 = fb$agamma,shape2 = fb$bgamma), type = 'scatter', mode = 'lines', fill = 'tozeroy', width=400, height=400)
    #fig2 <- fig2 %>% layout(xaxis = list(title = 'Gamma'), yaxis = list(title = 'Density'))
    
    #subplot(fig1, fig2, nrows = 2, margin = 0.04, heights = c(0.5, 0.5))
  })
  
  
  output$PriorGenPlot3 <- plotly::renderPlotly({
    #source("Functions/multiroot.R",local = TRUE)
    # Find alpha and beta of a beta dist based on percentiles
    fb<<-findbetaqq2(percentile.value1=input$PercentileValue3_1,percentile1=input$Percentile3_1,
                     percentile.value2=input$PercentileValue3_2,percentile2=input$Percentile3_2)
    priors$prior<<-list(a=fb$a,b=fb$b)
    x<-seq(0,1,length.out = 2000)
    #plot(x,dbeta(x = x,shape1 = fb$a,shape2 = fb$b),type = "l",lwd=3,ylab = "Density Beta")
    Prevalence<-dbeta(x = x,shape1 = priors$prior$a,shape2 = priors$prior$b)
    df <- data.frame(x, Prevalence)
    df <- gather(df, func, val, -x)
    gg <- ggplot(df, aes(x=x, y=val, group=func))
    gg <- gg + geom_line(aes(color=func),size=1.3) 
    gg <- gg + scale_y_continuous(expand=c(0, 0))
    gg <- gg + scale_color_manual(name="Prior(s)", 
                                  values=c("#b2182b"),
                                  labels=c("Prevalence"))
    gg <- gg + labs(x="Density", y="Probability distribution functions")
    gg <- gg + theme_bw()
    gg <- gg + theme(panel.border=element_blank(),plot.margin=unit(c(1,1,1.5,1.2),"cm"))
    gg <- gg + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ggplotly(gg)
    #fig2 <- plot_ly(x = ~x, y = ~dbeta(x = x,shape1 = fb$a, shape2 = fb$b), type = 'scatter', mode = 'lines', fill = 'tozeroy',
    #               width=400, height=400)
    #fig2 <- fig2 %>% layout(xaxis = list(title = 'Beta'), yaxis = list(title = 'Density'))
    #fig2  
  })
  
  output$PriorGenPlot3_true <- plotly::renderPlotly({
   #source("Functions/multiroot.R",local = TRUE)
    # Find alpha and beta of a beta dist based on percentiles Prevalence
    fb<<-findbetaqq2(percentile.value1=input$PercentileValue3_1,percentile1=input$Percentile3_1,
                     percentile.value2=input$PercentileValue3_2,percentile2=input$Percentile3_2)
    # Find alpha and beta of a beta dist based on percentiles Sensitivity
    fb_SE<<-findbetaqq2(percentile.value1=input$PercentileValue3_1_SE,percentile1=input$Percentile3_1_SE,
                        percentile.value2=input$PercentileValue3_2_SE,percentile2=input$Percentile3_2_SE)
    # Find alpha and beta of a beta dist based on percentiles Specificity
    fb_SP<<-findbetaqq2(percentile.value1=input$PercentileValue3_1_SP,percentile1=input$Percentile3_1_SP,
                        percentile.value2=input$PercentileValue3_2_SP,percentile2=input$Percentile3_2_SP)
    priors$prior<<-list(a=fb$a,b=fb$b, ase=fb_SE$a,bse=fb_SE$b, asp=fb_SP$a,bsp=fb_SP$b)
    
    x<-seq(0,1,length.out = 2000)
    Prevalence<-dbeta(x = x,shape1 = fb$a,shape2 = fb$b)
    Sensitivity<-dbeta(x = x,shape1 = fb_SE$a,shape2 = fb_SE$b)
    Specificity<-dbeta(x = x,shape1 = fb_SP$a,shape2 = fb_SP$b)
    df1 <- data.frame(x, Prevalence)
    df2 <- data.frame(x, Sensitivity, Specificity)
    df1 <- gather(df1, func, val, -x)
    df2 <- gather(df2, func, val, -x)
    
    gg1 <- ggplot(df1, aes(x=x, y=val, group=func))
    gg1 <- gg1 + geom_line(aes(color=func),size=1.3) 
    gg1 <- gg1 + scale_y_continuous(expand=c(0, 0))
    gg1 <- gg1 + scale_color_manual(name="Prior(s)", 
                                    values=c("#b2182b"),
                                    labels=c("Prevalence"))
    gg1 <- gg1 + labs(x="Density", y="Probability distribution functions")
    gg1 <- gg1 + theme_bw()
    gg1 <- gg1 + theme(panel.border=element_blank())
    gg1 <- gg1 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    
    gg2 <- ggplot(df2, aes(x=x, y=val, group=func))
    gg2 <- gg2 + geom_line(aes(color=func),size=1.3) 
    gg2 <- gg2 + scale_y_continuous(expand=c(0, 0))
    gg2 <- gg2 + scale_color_manual(name="", 
                                    values=c("#4393c3","#B79F00"),
                                    labels=c("Sensitivity","Specificity"))
    gg2 <- gg2 + labs(x="Density", y="Probability distribution functions")
    gg2 <- gg2 + theme_bw()
    gg2 <- gg2 + theme(panel.border=element_blank())
    gg2 <- gg2 + theme(axis.line=element_line(size=0.15, color="#2b2b2b"))
    ply1 <- ggplotly(gg1)
    ply2 <- ggplotly(gg2)
    subplot(ply1, ply2, nrows=1,titleX = TRUE)
  })
   
  
  output$APpre_Plot <- renderPlot({
    source("Functions/gss.R",local=TRUE)
    source("Functions/Jags_ApparentPre.R",local=TRUE)$value
    # Simple plot
    #plot(density(Model1.mcmc[[1]][,1]),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
    #lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
    Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
    post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
    Lik <- data.frame(density=rbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n)
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior' ; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri, Lik)
    
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2)+
      xlim(0, 1)+ theme(legend.position="top")
    S <- ggmcmc::ggs(Model1.mcmc)
    p2<-ggs_traceplot(S,family = "main")
    Sless<-data.frame(S[S$Parameter=="aplessthanSetvalue",])
    #    Sless$valueTF[Sless$value==0]<-rbinom(n = length(Sless$valueTF[Sless$value==0]),size = c(F), prob = 0.5)
    #    Sless$valueTF[Sless$value==1]<-TRUE
    # p3<-ggs_density(S,family = "less")
    xinput_Table<-data.frame(table(factor(Sless$value,levels = c(0,1), labels=c("No","Yes"))))
    p3<-ggplot(data=xinput_Table, aes(x=Var1,y = Freq)) +
      geom_bar(stat="identity", fill="steelblue")+ 
      labs(title="Is the posterior prevalence lower than set value?",
           x="Is it?", y = "MCMC samples")
    #                         x="", y = "Percent")+
    # p3<-ggplot(Sless, aes(x=(value)))+
    #   geom_bar(aes(y = ..prop..,fill = factor(..x..)), stat="count", fill="steelblue") +
    #   theme_minimal()+ labs(title="Is the prevalence lower than set value?", 
    #                         x="", y = "Percent")+
    #   scale_y_continuous(labels = scales::percent)
    
    pright<-grid.arrange(p1,ncol=1)
    pleft <-grid.arrange(p2,p3,ncol=1)
    gridExtra::grid.arrange(pright,pleft,ncol=2)
  },width = 'auto', heigh='auto')
  
  output$TRpre_Plot <- renderPlot({
    source("Functions/gss.R",local=TRUE)
    source("Functions/Jags_TruePre.R",local=TRUE)$value
    # Simple plot
    #plot(density(Model1.mcmc[[1]][,1]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
    #lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
    # ggplot
    Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
    post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
    Lik <- data.frame(density=rbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n)
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior' ; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri, Lik)
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2)+
      xlim(0, 1)+ theme(legend.position="top")
    S <- ggmcmc::ggs(Model1.mcmc)
    p2<-ggs_traceplot(S)
    gridExtra::grid.arrange(p1,p2,ncol=2)
    #  ggs_pairs(S, lower = list(continuous = "density"))
  },width = 'auto', heigh='auto')
  
  output$TRpreZero_Plot <- renderPlot({
    source("Functions/gss.R",local=TRUE)
    source("Functions/Jags_TruePreZero.R",local=TRUE)$value
    #simple plot
    #plot(density(Model1.mcmc[[1]][,5]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of TRpre")
    #lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),1.80,21),type = "l",col="red",lwd=5)
    #ggplot 
    Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
    post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
    Lik <- data.frame(density=rbinom(n = 10000, size =  input$n, prob = input$y/input$n)/input$n)
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior' ; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri, Lik)
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2)+
      xlim(0, 1)+ theme(legend.position="top")
    S <- ggmcmc::ggs(Model1.mcmc)
    p2<-ggs_traceplot(S)
    gridExtra::grid.arrange(p1,p2,ncol=2)
    #  ggs_pairs(S, lower = list(continuous = "density"))
    
  },width = 'auto', heigh='auto')
  
  output$MultTRpre_Plot <- renderPlot({
    source("Functions/gss.R",local=TRUE)
    source("Functions/Jags_MultipleGroupsPre.R")
    #Simple plot 
    #plot(density(Model1.mcmc[[1]][,1]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
    #lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
    #ggplot
    Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
    post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
   # Lik <- data.frame(density=rbinom(n = 10000, size =  sum(input$n), prob = sum(input$y/input$n))/sum(input$n))
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior' #; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri)#, Lik)
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2) +
      xlim(0, 1) + theme(legend.position="top") + scale_fill_brewer(palette="Dark2")
    S <- ggmcmc::ggs(Model1.mcmc)
    p2<-ggs_traceplot(S,family = "main")
    SPre<-get_family(D = S,family = "pre")
    p3<-ggs_density(SPre)
    
    gridExtra::grid.arrange(p1,p2,p3,ncol=3)
    #   https://cran.r-project.org/web/packages/ggmcmc/vignettes/using_ggmcmc.html
    #   S.full <- ggs(radon$s.radon, par_labels=L.radon.intercepts, family="^alpha")
    #   ggs_caterpillar(S.full)  },width = 400, heigh=400)
    # Z <- data.frame(
    #   Parameter=paste("alpha[", radon$counties$id.county, "]", sep=""),
    #   value=radon$counties$uranium)
    # ggs_caterpillar(ggs(radon$s.radon, family="^alpha"), X=Z, horizontal=FALSE)
    
  },width = 'auto', heigh='auto')
  
  output$MultTRpreZero_Plot <- renderPlot({
    source("Functions/gss.R",local=TRUE)
    source("Functions/Jags_MultipleGroupsPreZero.R")
    #Simple plot 
    #plot(density(Model1.mcmc[[1]][,1]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
    #lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
    #ggplot
    Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
    post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
    #Lik <- data.frame(density=rbinom(n = 10000, size =  sum(input$n), prob = sum(input$y/input$n))/sum(input$n))
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior' #; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri)#, Lik)
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2) +
      xlim(0, 1) + theme(legend.position="top") + scale_fill_brewer(palette="Dark2")
    S <- ggmcmc::ggs(Model1.mcmc)
    p2<-ggs_traceplot(S,family = "main")
    SPre<-get_family(D = S,family = "pre")
    p3<-ggs_density(SPre)
    
    gridExtra::grid.arrange(p1,p2,p3,ncol=3)
    #   https://cran.r-project.org/web/packages/ggmcmc/vignettes/using_ggmcmc.html
    #   S.full <- ggs(radon$s.radon, par_labels=L.radon.intercepts, family="^alpha")
    #   ggs_caterpillar(S.full)  },width = 400, heigh=400)
    # Z <- data.frame(
    #   Parameter=paste("alpha[", radon$counties$id.county, "]", sep=""),
    #   value=radon$counties$uranium)
    # ggs_caterpillar(ggs(radon$s.radon, family="^alpha"), X=Z, horizontal=FALSE)
    
  },width = 'auto', heigh='auto')
  
  output$MultTRapp_Plot <- renderPlot({
    source("Functions/gss.R",local=TRUE)
    source("Functions/Jags_MultipleGroupsApp.R")
    #Simple plot 
    #plot(density(Model1.mcmc[[1]][,1]),ylim=c(0,100),xlim=c(0,1),lwd=5, main = "Posterior (black) and Prior (red) distribution of APpre")
    #lines(1:1000/1000,dbeta(seq(0,1,length.out = 1000),a,b),type = "l",col="red",lwd=5)
    #ggplot
    Model1.mcmc_df<-data.frame(Model1.mcmc[[1]])
    post <-  data.frame(density=data.frame(density=Model1.mcmc_df$main.ap))
    pri <-  data.frame(density=rbeta(10000,shape1 = priors$prior$a,shape2=priors$prior$b))
    #mn=mean((sum(dataset()$positive/dataset()$n))/sum(dataset()$n))
    #tau=sd(dataset()$positive/dataset()$n)
    #Lik <- data.frame(density=rbinom(n = 10000, size =  sum(dataset()$n), 
    #                                 prob = rbeta(10000,shape1 = mn*tau,
    #                                              shape2 = (1-mn)*tau)
    #                                 ))
    post$Distribution <- 'posterior' ; pri$Distribution <- 'prior'# ; Lik$Distribution <- 'likelihood'
    triple <- rbind(post, pri)#, Lik)
    p1<-ggplot(triple, aes(density, fill = Distribution)) + geom_density(alpha = 0.2) +
      xlim(0, 1) + theme(legend.position="top") + scale_fill_brewer(palette="Dark2")
    S <- ggmcmc::ggs(Model1.mcmc)
    p2<-ggs_traceplot(S,family = "main")
    SPre<-get_family(D = S,family = "pre")
    p3<-ggs_density(SPre)
    
    gridExtra::grid.arrange(p1,p2,p3,ncol=3)
    #   https://cran.r-project.org/web/packages/ggmcmc/vignettes/using_ggmcmc.html
    #   S.full <- ggs(radon$s.radon, par_labels=L.radon.intercepts, family="^alpha")
    #   ggs_caterpillar(S.full)  },width = 400, heigh=400)
    # Z <- data.frame(
    #   Parameter=paste("alpha[", radon$counties$id.county, "]", sep=""),
    #   value=radon$counties$uranium)
    # ggs_caterpillar(ggs(radon$s.radon, family="^alpha"), X=Z, horizontal=FALSE)
    
  },width = 'auto', heigh='auto')
  
  
  
  # Interactive plot output########################################################################## #
  
  output$APar1_Plot_fb <- renderUI({
    if(input$ID_TrueApp=="Apparent prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="No"){
      plotOutput("APpre_Plot")
    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="No"){
      plotOutput("TRpre_Plot")
      #    }else if(input$ID_TrueApp=="Apparent prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      #      source("Functions/Interface_Jags_MultipleGroupsApPreNozero.R",local = TRUE) # File ready
      #    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      #      source("Functions/Interface_Jags_MultipleGroupsTruePreNozero.R",local = TRUE) # File ready
    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="Yes"){
      plotOutput("TRpreZero_Plot")
     }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="Yes"){
       plotOutput("MultTRpreZero_Plot")
     }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
       plotOutput("MultTRpre_Plot")
    }else if(input$ID_TrueApp!="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      plotOutput("MultTRapp_Plot")
  }
  })
  
  # Interactive+dynamic sliders  #################################################################### #
  output$sliders_fb <- renderUI({
    if(input$lower.value=="FALSE"){
      sliderInput(inputId = "PercentileValue1",label = paste("Specify the upper or lower limit for the ",input$ID_MeanMedianMode," at the specified level of confidence: "), 
                  value = min(input$PercentileValue1,input$PriorMetric), min=0, max=1,step = 0.001)
    }else{
      sliderInput(inputId = "PercentileValue1",label = paste("Specify the upper or lower limit for the ",input$ID_MeanMedianMode," at the specified level of confidence: "), 
                  value = max(input$PercentileValue1,input$PriorMetric), min=0, max=1,step = 0.001)
      
    }
  })
  output$sliders_fb_SE <- renderUI({
    if(input$lower.value=="FALSE"){
      sliderInput(inputId = "PercentileValue1_SE",label = paste("Specify the upper or lower limit for the sensitivity at the specified level of confidence: "), 
                  value = min(input$PercentileValue1_SE,input$PriorMetric_SE), min=0, max=1,step = 0.001)
    }else{
      sliderInput(inputId = "PercentileValue1_SE",label = paste("Specify the upper or lower limit for the sensitivity at the specified level of confidence: "), 
                  value = max(input$PercentileValue1_SE,input$PriorMetric_SE), min=0, max=1,step = 0.001)
      
    }
  })
  output$sliders_fb_SP <- renderUI({
    if(input$lower.value=="FALSE"){
      sliderInput(inputId = "PercentileValue1_SP",label = paste("Specify the upper or lower limit for the specificity at the specified level of confidence: "), 
                  value = min(input$PercentileValue1_SP,input$PriorMetric_SP), min=0, max=1,step = 0.001)
    }else{
      sliderInput(inputId = "PercentileValue1_SP",label = paste("Specify the upper or lower limit for the specificity at the specified level of confidence: "), 
                  value = max(input$PercentileValue1_SP,input$PriorMetric_SP), min=0, max=1,step = 0.001)
      
    }
  })
  outputOptions(output, "sliders_fb_SE", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders_fb_SP", suspendWhenHidden = FALSE)

  
  output$zero_fb <- renderUI({
    if(input$ID_TrueApp!="True prevalence"){
      radioButtons(inputId = 'ID_ZeroPrevalence', choices=c("No"),
                   label = 'Do you want to account for zero true prevalence?',
                   selected = "No",inline = TRUE)
    }else{
      radioButtons(inputId = 'ID_ZeroPrevalence', choices=c("No","Yes"),
                   label = 'Do you want to account for zero true prevalence?',
                   selected = "No",inline = TRUE)
    }
  })
  
  output$report_fb <- renderUI({
    if(priors$mSetupmodel==TRUE){uiOutput("Rmark")}
  })
  output$report_fb_side <- renderUI({
    if(priors$mSetupmodel==TRUE){
      source("Functions/Interface_DownloadResults.R",local = TRUE)$value # Done
      
    }
  })
  
output$downloadModel <- downloadHandler(
  filename <- function(){
    paste("Model1.mcmc.RData")
  },
  content = function(file) {
    save(Model1.mcmc, file = file)
  }
)
output$downloadJags <- downloadHandler(
  filename <- function(){
    paste("JagsModes.txt")
  },
  content = function(file) {
    save(generic_jags, file = file)
  }
)


output$downloadData <- downloadHandler(
  filename <- function(){
    paste("InputData.RData")
  },
  content = function(file) {
    save(temp_data, file = file)
  }
)
  
  
  output$metric_fb <- renderUI({
    if(input$ID_SingleMultiple=="Single population"){
      radioButtons(inputId = 'ID_MeanMedianMode', choices=c("Mean",
                                                            "Median",
                                                            "Mode",
                                                            "Percentiles"),
                   label = 'Which prevelance statistical measure would you like to use for prior elicitation?',
                   selected = "Mean",inline = TRUE)
    }else{
      radioButtons(inputId = 'ID_MeanMedianMode', choices=c("Mean"),
                   label = 'Which prevelance statistical measure would you like to use for prior elicitation?',
                   selected = "Mean",inline = TRUE)
    }
  })
  
  # COndition for sample size and positives bugged.
  # output$DataInput_fb <- renderUI({
  #   numericInput(inputId = "y", label = "Number of positive tests: ",min = 1, max = 1000000, step = 1, value = input$n)
  # })
  
  output$MultiDatasets_Out_fb <- renderUI({
    
    if(input$ID_SingleMultiple=="Multiple populations"){
      source("Functions/Interface_MultiDatasetYes.R",local = TRUE)$value
    }else{
      source("Functions/Interface_MultiDatasetNo.R",local = TRUE)$value
    }
  })
  output$MultiDataset_fb <- renderUI({
    if(input$ID_SingleMultiple=="Multiple populations"){
      if(input$LoadData=="Option1Preload"){
        selectInput("Indata1", "Dataset:",
                    c("Data1" = "Data1",
                      "Data2" = "Data2",
                      "Data3" = "Data3",
                      "Data4" = "Data4"))
      }else{
        
        fileInput(inputId = "Indata2", label = "Choose .xls(x) File",
                  accept = c(
                    "text/csv",
                    "text/comma-separated-values,text/plain",
                    ".csv",
                    ".xls")
        )    }
    }
    else if(input$ID_SingleMultiple!="Multiple populations"){
    }
    
  })
  
  output$sliders2_fb <- renderUI({
    if(input$lower.value2=="FALSE"){
      updateSliderInput(session = session,inputId = "PercentileValue2", label = "Specify the lower limit for the mean/median/mode at the specified level of confidence: ",
                  value = min(input$PercentileValue2,input$PriorMean2-0.001), min=0, max=1,step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "PercentileValue2", label = "Specify the upper limit for the mean/median/mode at the specified level of confidence: ",
                  value = max(input$PercentileValue2,input$PriorMean2+0.001), min=0, max=1,step = 0.001)
    }
  })
  output$sliders22_fb <- renderUI({
    if(input$lower.value2=="FALSE"){
      updateSliderInput(session = session,inputId = "PercentileMedian2", label = "Specify the median value that corresponds to the defined psi.percentile. has to be higher than both themean and the percentile: ",
                  value = min(input$PercentileValue2-0.001,input$PercentileMedian2,input$PriorMean2-0.001), min=0, max=1,step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "PercentileMedian2", label = "Specify the median value that corresponds to the defined psi.percentile. has to be higher than both themean and the percentile: ",
                  value = max(input$PercentileValue2+0.001,input$PercentileMedian2,input$PriorMean2+0.001), min=0, max=1,step = 0.001)
    }
  })
  output$sliders23_fb <- renderUI({
    if(input$lower.value2=="FALSE"){
      updateSliderInput(session = session,inputId = "Percentile95value2", label = "Specify the value that the percentile.median does not exceed with 95% confidence. has to be higher than the percentile",
                  value=min(input$Percentile95value2,input$PercentileMedian2-0.001), min=0, max=1, step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "Percentile95value2", label = "Specify the value that the percentile.median does not exceed with 95% confidence. has to be higher than the percentile",
                  value=max(input$Percentile95value2,input$PercentileMedian2+0.001), min=0, max=1, step = 0.001)
    }
  })
 
  output$sliders2_SP_fb <- renderUI({
    if(input$lower.value2_SP=="FALSE"){
      updateSliderInput(session = session,inputId = "PercentileValue2_SP", label = "Specify the upper or lower limit for the mean/median/mode at the specified level of confidence: ", 
                  value = min(input$PercentileValue2_SP,input$PriorMean2_SP-0.001), min=0, max=1,step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "PercentileValue2_SP", label = "Specify the upper or lower limit for the mean/median/mode at the specified level of confidence: ", 
                  value = max(input$PercentileValue2_SP,input$PriorMean2_SP+0.001), min=0, max=1,step = 0.001)
    }
  })
  output$sliders22_SP_fb <- renderUI({
    if(input$lower.value2_SP=="FALSE"){
      updateSliderInput(session = session,inputId = "PercentileMedian2_SP", label = "Specify the median value that corresponds to the defined psi.percentile. has to be higher than both themean and the percentile: ", 
                  value = min(input$PercentileValue2_SP-0.001,input$PercentileMedian2_SP,input$PriorMean2_SP-0.001), min=0, max=1,step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "PercentileMedian2_SP", label = "Specify the median value that corresponds to the defined psi.percentile. has to be higher than both themean and the percentile: ", 
                  value = max(input$PercentileValue2_SP+0.001,input$PercentileMedian2_SP,input$PriorMean2_SP+0.001), min=0, max=1,step = 0.001)
    }
  })
  output$sliders23_SP_fb <- renderUI({
    if(input$lower.value2_SP=="FALSE"){
      updateSliderInput(session = session,inputId = "Percentile95value2_SP", label = "Specify the value that the percentile.median does not exceed with 95% confidence. has to be higher than the percentile", 
                  min=0, max=1, value=min(input$Percentile95value2_SP,input$PercentileMedian2_SP-0.001),step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "Percentile95value2_SP", label = "Specify the value that the percentile.median does not exceed with 95% confidence. has to be higher than the percentile", 
                  min=0, max=1, value=max(input$Percentile95value2_SP,input$PercentileMedian2_SP+0.001),step = 0.001)
    }
  })

  output$sliders2_SE_fb <- renderUI({
    if(input$lower.value2_SE=="FALSE"){
      updateSliderInput(session = session,inputId = "PercentileValue2_SE", label = "Specify the lower limit for the mean/median/mode at the specified level of confidence: ", 
                  value = min(input$PercentileValue2_SE,input$PriorMean2_SE-0.001), min=0, max=1,step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "PercentileValue2_SE", label = "Specify the upper limit for the mean/median/mode at the specified level of confidence: ", 
                  value = max(input$PercentileValue2_SE,input$PriorMean2_SE+0.001), min=0, max=1,step = 0.001)
    }
  })
  output$sliders22_SE_fb <- renderUI({
    if(input$lower.value2_SE=="FALSE"){
      updateSliderInput(session = session,inputId = "PercentileMedian2_SE", label = "Specify the median value that corresponds to the defined psi.percentile. has to be higher than both themean and the percentile: ", 
                  value = min(input$PercentileValue2_SE-0.001,input$PercentileMedian2_SE,input$PriorMean2_SE-0.001), min=0, max=1,step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "PercentileMedian2_SE", label = "Specify the median value that corresponds to the defined psi.percentile. has to be higher than both themean and the percentile: ", 
                  value = max(input$PercentileValue2_SE+0.001,input$PercentileMedian2_SE,input$PriorMean2_SE+0.001), min=0, max=1,step = 0.001)
    }
  })
  output$sliders23_SE_fb <- renderUI({
    if(input$lower.value2_SE=="FALSE"){
      updateSliderInput(session = session,inputId = "Percentile95value2_SE", label = "Specify the value that the percentile.median does not exceed with 95% confidence. has to be higher than the percentile", 
                  value=min(input$Percentile95value2_SE,input$PercentileMedian2_SE-0.001), min=0, max=1, step = 0.001)
    }else{
      updateSliderInput(session = session,inputId = "Percentile95value2", label = "Specify the value that the percentile.median does not exceed with 95% confidence. has to be higher than the percentile", 
                  value=max(input$Percentile95value2_SE,input$PercentileMedian2_SE+0.001), min=0, max=1, step = 0.001)
    }
  })
  
  output$sliders_qq_fb<-renderUI({ 
    sliderInput(inputId = "PercentileValue3_2", label = "Specify the value for the 2nd percentile", 
                min=0, max=1, value=max(input$PercentileValue3_1+0.001,input$PercentileValue3_2),step = 0.001)
    
  })
  output$sliders_qq22_fb<-renderUI({ 
    sliderInput(inputId = "PercentileValue3_2", label = "Specify the value for the 2nd percentile", 
                min=0, max=1, value=max(input$PercentileValue3_1+0.001,input$PercentileValue3_2),step = 0.001)
    
  })
  output$sliders_qq22_SE_fb<-renderUI({ 
    sliderInput(inputId = "PercentileValue3_2_SE", label = "Specify the value for the 2nd percentile", 
                min=0, max=1, value=max(input$PercentileValue3_1_SE+0.001,input$PercentileValue3_2_SE),step = 0.001)
    
  })
  output$sliders_qq22_SP_fb<-renderUI({ 
    sliderInput(inputId = "PercentileValue3_2_SP", label = "Specify the value for the 2nd percentile", 
                min=0, max=1, value=max(input$PercentileValue3_1_SP+0.001,input$PercentileValue3_2_SP),step = 0.001)
    
  })
  
   outputOptions(output, "sliders2_fb", suspendWhenHidden = FALSE)
   outputOptions(output, "sliders22_fb", suspendWhenHidden = FALSE)
   outputOptions(output, "sliders23_fb", suspendWhenHidden = FALSE)

  outputOptions(output, "sliders2_SP_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders22_SP_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders23_SP_fb", suspendWhenHidden = FALSE)

  outputOptions(output, "sliders2_SE_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders22_SE_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders23_SE_fb", suspendWhenHidden = FALSE)
  
  outputOptions(output, "sliders_qq_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders_qq22_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders_qq22_SE_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "sliders_qq22_SP_fb", suspendWhenHidden = FALSE)
  outputOptions(output, "MultiDataset_fb", suspendWhenHidden = FALSE)

  
  output$Priors_fb<-renderUI({
    if(input$ID_MeanMedianMode=="Percentiles"){
      if(input$ID_TrueApp!="True prevalence"){
        source("Functions/Interface_findBetaqq2.R",local = TRUE)$value
      }else{
        source("Functions/Interface_findBetaqq2_SE_SP.R",local = TRUE)$value
      }
    }else{
      if(input$ID_SingleMultiple=="Single population"){
        if(input$ID_TrueApp!="True prevalence"){
          source("Functions/Interface_findBeta.R",local = TRUE)$value
        }else{
          source("Functions/Interface_findBeta_SE_SP.R",local = TRUE)$value
        }
      }else if(input$ID_SingleMultiple=="Multiple populations"){
        if(input$ID_TrueApp=="True prevalence"){
          if(input$ID_ZeroPrevalence=="Yes"){
            source("Functions/Interface_findBetamupsi2_SE_SP_tau0.R",local = TRUE)$value
          }else if(input$ID_ZeroPrevalence=="No"){
          source("Functions/Interface_findBetamupsi2_SE_SP.R",local = TRUE)$value
        }
        }else{
          source("Functions/Interface_findBetamupsi2.R",local = TRUE)$value
        }
      }
    }
  })
  
  output$Priors_Plot_Sum_fb <- renderUI({
    if(priors$SetupPriors==TRUE){
      if(input$ID_MeanMedianMode=="Percentiles"){
        if(input$ID_TrueApp!="True prevalence"){
          plotlyOutput("PriorGenPlot3")
        }else{
          plotlyOutput(width = '100%',height = '100%',"PriorGenPlot3_true")
        }
      }else{
        if(input$ID_SingleMultiple=="Single population"){
          if(input$ID_TrueApp!="True prevalence"){
            plotlyOutput("PriorGenPlot1")
          }else{
            plotlyOutput(width = '100%',height = '100%',"PriorGenPlot1_true")
          }
        }else if(input$ID_SingleMultiple=="Multiple populations"){
          if(input$ID_TrueApp!="True prevalence"){
          plotlyOutput("PriorGenPlot2")
          }else{
            if(input$ID_ZeroPrevalence=="Yes"){
              plotlyOutput(width = '100%',height = '100%',"PriorGenPlot2_true_zero")
            }else if(input$ID_ZeroPrevalence=="No"){
              plotlyOutput(width = '100%',height = '100%',"PriorGenPlot2_true")
            }
          }
        }
      }
    }
    
    # 
    # 
    # if(priors$SetupPriors==FALSE){
    # } else if(priors$SetupPriors==TRUE){
    #   if(input$ID_MeanMedianMode=="Percentiles"){
    #     plotlyOutput("PriorGenPlot3")
    #   } else{
    #     if(input$ID_SingleMultiple=="Single population"){
    #       plotlyOutput("PriorGenPlot1")
    #     }else if(input$ID_SingleMultiple=="Multiple populations"){
    #       plotlyOutput("PriorGenPlot2")
    #     }
    #   }
    # }
    
  })
  
  # conditions<-reactive({
  # cond1<<-(input$ID_MeanMedianMode!="Percentiles" & input$ID_SingleMultiple=="Single population")
  # cond2<<-(input$ID_MeanMedianMode!="Percentiles" & input$ID_SingleMultiple=="Multiple populations")
  # cond3<<-(input$ID_MeanMedianMode=="Percentiles")
  # cond4<<-(input$ID_SingleMultiple=="Single population")
  # cond5<<-(input$ID_SingleMultiple!="Single population")
  # cond6<<-(input$ID_TrueApp!="True prevalence")
  # cond7<<-(input$ID_TrueApp=="True prevalence")
  # cond8<<-(input$ID_TrueApp=="True prevalence")
  # cond9<<-(input$ID_TrueApp=="True prevalence")
  # list(cond1,cond2,cond3,cond4,cond5,cond6,cond7,cond8,cond9)
  # })
  
  
  # Bayesian Models #################################################################################### #
  output$Bayesian_fb<-renderUI({
    if(input$ID_TrueApp=="Apparent prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="No"){
      source("Functions/Interface_Jags_ApparentPre.R",local = TRUE)$value # Done
    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="No"){
      source("Functions/Interface_Jags_TruePre.R",local = TRUE)$value # Done
      #    }else if(input$ID_TrueApp=="Apparent prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      #      source("Functions/Interface_Jags_MultipleGroupsApPreNozero.R",local = TRUE) # File ready
      #    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      #      source("Functions/Interface_Jags_MultipleGroupsTruePreNozero.R",local = TRUE) # File ready
    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="Yes"){
      source("Functions/Interface_Jags_TruePreZero.R",local = TRUE)$value # Done
    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="Yes"){
      source("Functions/Interface_Jags_MultipleGroupsTruePreZero.R",local = TRUE)$value # Done
    }else if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      source("Functions/Interface_Jags_MultipleGroupsTruePre.R",local = TRUE)$value # Done
    }else if(input$ID_TrueApp!="True prevalence" & input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
      source("Functions/Interface_Jags_MultipleGroupsAppPre.R",local = TRUE)$value # Done
      
    }
  })
 
  ######## Output of selected priors ################################################################### #
  observeEvent(input$buttonPrior,{
    priors$PriorSelect<-TRUE
    if(input$ID_TrueApp=="Apparent prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="Νο"){
      priors$prior<<-list(a=fb$a,b=fb$b)
    }
    if(input$ID_TrueApp=="True prevalence" & input$ID_SingleMultiple=="Single population" & input$ID_ZeroPrevalence=="No"){
      priors$prior<<-list(a=fb$a,b=fb$b)
    }
  })
  # output$PriorSelectionText<-renderText(paste("Prior is",prior_cond,"defined"))
  
  observeEvent(input$buttonSetup,{
    priors$temp<-"Status: 'Set'";
    priors$temp2<-paste("Your input assumes that: \n 1. ",input$ID_SingleMultiple," will be modelled, \n 2. ",input$ID_ZeroPrevalence,", zero prevalence will be modelled, 3. the ",input$ID_TrueApp," will be modelled and \n 4. (the) '",input$ID_MeanMedianMode,"' will be used to elicitate prior knowledge",sep="")
    priors$icons<-"thumbs-up"#   prior_cond<<-" "
    priors$color<-"green"
    priors$SetupPriors<-TRUE
  })
  
  # Download report ################################################################################# #
  
  
  
  output$downloadReport <- downloadHandler(
    filename = function() {
      paste("my-report", sep = ".", switch(
        input$format, PDF = "pdf", HTML = "html", Word = "docx"
      ))
    },
    
    content = function(file) {
      src <- normalizePath("report.Rmd")
      
      # temporarily switch to the temp dir, in case you do not have write
      # permission to the current working directory
      owd <- setwd(tempdir())
      on.exit(setwd(owd))
      file.copy(src, "report.Rmd", overwrite = TRUE)
      
      library(rmarkdown)
      out <- render("report.Rmd", switch(
        input$format,
        PDF = pdf_document(), HTML = html_document(), Word = word_document()
      ))
      file.rename(out, file)
    }
  )
  
  # Initial screen + buttons ################################################################################## #
  
  
  output$NumberPriorSetups <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      paste0("4"),"prior elicitation approaches",
      icon = icon("chevron-down"),color = "teal")
  })

  output$NumberModels <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      paste0("8")," prevelance model variations",
      icon = icon("arrows-alt"),color = "blue")
  })

  output$NumberDemos <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      paste0("3"),"preloaded datasets for demonstration",
      icon = icon("thumbs-up"),color = "red")
  })

  output$Boxsetup1 <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      paste0(priors$temp),paste(priors$temp2),
      icon = icon(priors$icons),color = priors$color)
  })

  output$Boxsetup2 <- shinydashboard::renderValueBox({
    if(priors$PriorSelect==FALSE){
      shinydashboard::valueBox(
        paste0("Prior setup:"),if(priors$SetupPriors==FALSE){"Please set up the model in Tab 'Set up' before you move forward"}else{"Setup done - Please elicite a prior and press select"},
        icon = if(priors$SetupPriors==FALSE){icon("thumbs-down")}else{icon("thumbs-up")},color = if(priors$SetupPriors==FALSE){"red"}else{"yellow"}
      )}
    else if(priors$PriorSelect==TRUE){
      shinydashboard::valueBox(
        paste0("Prior setup:"),if(priors$SetupPriors==FALSE){"Please set up the model in Tab 'Set up' before you move forward"}else{"Model and prior setup ready! - Move to tab 'Model'"},
        icon = if(priors$SetupPriors==FALSE){icon("thumbs-down")}else{icon("thumbs-up")},color = if(priors$SetupPriors==FALSE){"red"}else{"green"}
      )
    }
  })

  output$Boxsetup3 <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      
      paste0("Model setup:"),if(priors$PriorSelect==FALSE | priors$SetupPriors==FALSE | priors$mSetupmodel==FALSE){"Please set up the model, priors and input data in Tabs 'Set up', 'Priors' and 'Model' before you move forward"}else{paste("Model is selected and Data",name_data," are currently loaded- go to report")},
      icon = if(priors$PriorSelect==FALSE | priors$SetupPriors==FALSE | priors$mSetupmodel==FALSE){icon("thumbs-down")}else{icon("thumbs-up")},
      color = if(priors$PriorSelect==FALSE | priors$SetupPriors==FALSE | priors$mSetupmodel==FALSE){"red"}else{"green"}
    )

  })

  output$Boxsetup4 <- shinydashboard::renderValueBox({
    shinydashboard::valueBox(
      paste0("Status report:"),if(priors$mSetupmodel==FALSE){"Please finish with all previous steps before accesing the report"}else{"The report will become available below"},
      icon = if( priors$mSetupmodel==FALSE){icon("list-alt")}else{icon("thumbs-up")},
      color = if(priors$mSetupmodel==FALSE){"red"}else{"green"}
    )

  })
  
  observeEvent(input$buttonReset, {
    # shinyjs::reset("setup-panel")
    # priors$color<-"red"
    # priors$icons<-"thumbs-down"
    # priors$temp<-"Status: 'Not set'"
    # priors$temp2<-"Please first select options and press -Fix-"
    # priors$SetupPriors<-FALSE
    session$reload()
  })
  
  # needs fix inside
  observeEvent(input$buttonPriorReset, {
    #shinyjs::reset("priors-panel")
    #priors$PriorSelect<-FALSE
    session$reload()
  })
  # needs fix inside
  observeEvent(input$buttonModelReset, {
    #shinyjs::reset("model-panel")
    #priors$SetupPriors<-FALSE
    session$reload()
  })
  
  observeEvent(input$buttonFixModel, {
    if(input$ID_SingleMultiple=="Multiple populations"){
      if(input$LoadData=="Option1Preload"){
        req(!is.na(input$Indata1))
        name_data <- input$Indata1
      }else{
        req(!is.na(input$Indata2))
        name_data <- input$Indata2
      }
    }
    priors$mSetupmodel<-TRUE
  })
  
  # Report download in html - pdf - word
  
  output$Rmark <- renderUI({
    if(input$ID_TrueApp=="True prevalence"){
      temp<-"TPpre_Report_True.Rmd"
    }else{
      temp<-"TPpre_Report.Rmd"
    }
    if(input$ID_SingleMultiple=="Multiple populations"){
      if(input$ID_TrueApp=="True prevalence"){
        temp<-"TPpre_Report_Mult_True.Rmd"
      }else{
      temp<-"TPpre_Report_Mult.Rmd"
      }
    }
    includeHTML(render(paste0("./Rmarkdown/",temp), quiet = TRUE,output_format = "html_document"))
  })
  
  # output$downloadReport <- downloadHandler(
  #   # For PDF output, change this to "report.pdf"
  #   # filename = function() {
  #   #   paste('my-report', sep = '.', switch(
  #   #     input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
  #   #   ))
  #   # },
  #   filename = function() {
  #     paste('my-report', sep = '.', switch(
  #       input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
  #     ))
  #   },
  #   content = function(file) {
  #     # Copy the report file to a temporary directory before processing it, in
  #     # case we don't have write permissions to the current working dir (which
  #     # can happen when deployed).
  #     if(input$ID_MeanMedianMode!="Percentiles"){
  #       tempReport <- file.path("Rmarkdown/temp/TPpre_Report.Rmd")
  #       file.copy("Rmarkdown/TPpre_Report.Rmd", tempReport, overwrite = TRUE)
  #     }
  #     if(input$ID_MeanMedianMode=="Percentiles"){
  #       tempReport <- file.path("Rmarkdown/temp/TPpre_Report_Perc.Rmd")
  #       file.copy("Rmarkdown/TPpre_Report_Perc.Rmd", tempReport, overwrite = TRUE)
  #     }
  #     if(input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="Yes"){
  #       tempReport <- file.path("Rmarkdown/temp/TPpre_Report_MultZero.Rmd")
  #       file.copy("Rmarkdown/TPpre_Report_Mult.Rmd", tempReport, overwrite = TRUE)
  #     }
  #     if(input$ID_SingleMultiple=="Multiple populations" & input$ID_ZeroPrevalence=="No"){
  #       tempReport <- file.path("Rmarkdown/temp/TPpre_Report_Mult.Rmd")
  #       file.copy("Rmarkdown/TPpre_Report_Mult.Rmd", tempReport, overwrite = TRUE)
  #     }
  #     # Set up parameters to pass to Rmd document
  #     params <- list(fb=fb,input=input,table2=table2)
  #     
  #     # n = input$n, 
  #     # y = input$y, 
  #     # fb = fb,
  #     # pop=input$ID_SingleMultiple,
  #     # zero=input$ID_ZeroPrevalence,
  #     # pre=input$ID_TrueApp,
  #     # mea=input$ID_MeanMedianMode
  #     
  #     # Knit the document, passing in the `params` list, and eval it in a
  #     # child of the global environment (this isolates the code in the document
  #     # from the code in this app).
  #     rmarkdown::render(input = tempReport,output_format = ,
  #                       switch(
  #                         input$format,
  #                         PDF = pdf_document(),
  #                         HTML = html_document(),
  #                         Word = word_document()
  #                       ),output_file = file,
  #                       params = params,
  #                       envir = new.env(parent = globalenv())
  #     )
  #   }
  # )
  
  # output$downloadReport <- 
  #   downloadHandler(
  #     "TPpre_Report.pdf",
  #     content = 
  #       function(file)
  #       {
  #         rmarkdown::render(
  #           input = "Rmarkdown/TPpre_Report.Rmd",
  #           output_file = "TPpre_Report.pdf",
  #           params = list(table = table(),
  #                         plot = plot())
  #         ) 
  #         readBin(con = "TPpre_Report.pdf", 
  #                 what = "raw",
  #                 n = file.info("TPpre_Report.pdf")[, "size"]) %>%
  #           writeBin(con = file)
  #       }
  #   )
  
  # observe({
  #   shinyjs::hide(selector = "#navbar li a[data-value=report-tab]")
  # #shinyjs::show(selector = "#navbar li a[data-value=model-panel]")
  # })
  
  dataset<<- reactive({
    if(input$ID_SingleMultiple=="Multiple populations"){
      if(input$LoadData=="Option1Preload"){
        req(!is.na(input$Indata1))
        temp_data <<- data.frame(get(input$Indata1)) 
      }else{
        req(!is.na(input$Indata2))
        inFile <- input$Indata2
        temp_data <<- data.frame(read_excel(inFile$datapath,sheet=1))
      }
    }
    return(temp_data)
  })
  
  output$table2 <- renderDataTable({
    if(input$ID_SingleMultiple=="Multiple populations"){
      if(input$LoadData=="Option1Preload"){
        req(!is.na(input$Indata1))
        DT::datatable(data.frame(get(input$Indata1)))     
      }else{
        req(!is.na(input$Indata2))
        inFile <- input$Indata2
        temp_data <- data.frame(read_excel(inFile$datapath,sheet=1))
        DT::datatable(data.frame(temp_data))     
        
      }
      
    }
  })
  
  observeEvent(input$buttonPriorHelp3, {
    showModal(modalDialog(
      title = "Example 3",
      paste0("Let assume that the mean prevalence of a disease/infection for the units within an area/region is thought to be 0.20 and we are 99% confident that it is not more than 0.40. Within this area/group, we are also confident that 90% of all units have a prevalence less or equal to 0.50 and we are 95% certain that it does not exceed 0.60. 
             Then we have to set <<themean=0.20, percentile=0.99, lower.v=TRUE, percentile.value=0.30, psi.percentile=0.90, percentile.median=0.50, percentile95value=0.60>>"),
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
  
  observeEvent(input$buttonPriorHelp2, {
    showModal(modalDialog(
      title = "Example 2",
      paste0("Let assume that our beliefs point that 20% of the units in an area/region have a prevalence of disease/infection less than or equal to 0.30 while at the same time we are 90% certain that the prevalence is less than 0.60. 
      Then we have to set <<percentile.value1=0.30, percentile1=0.20, percentile.value2=0.60, percentile2=0.90>>"),
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
  observeEvent(input$buttonPriorHelp1, {
    showModal(modalDialog(
      title = "Example 1",
      paste0("Let assume that based on the available literature the mean value for the sensitivity of a test is expected to be 0.90 and we can be 95% sure that it is higher than 0.80. 
             Then we have to set, <<themean=0.90, percentile=0.95,lower.v=FALSE, percentile.value=0.80>>"),
      easyClose = TRUE,
      footer = NULL
    ))
  })
  
})